% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ParameterSet.R
\name{ParameterSet}
\alias{ParameterSet}
\alias{parameters}
\alias{getParameterValue}
\alias{setParameterValue}
\title{Make an R6 Parameter Set for Distributions}
\arguments{
\item{id}{unique identifier for parameter. See Details.}

\item{value}{initial value}

\item{lower}{minimum value parameter can take}

\item{upper}{maximum value parameter can take}

\item{class}{parameter class, one of "numeric" or "integer"}

\item{settable}{logical; if TRUE the parameter can be updated. See Details.}

\item{fittable}{logical; if TRUE the parameter can be estimated. See Details.}

\item{updateFunc}{string to be parsed and evaluated as function. See Details.}

\item{description}{description of parameter}

\item{as.df}{logical; if FALSE (default) parameters returned as ParameterSet, otherwise data.frame}

\item{lst}{list; list names are parameter IDs, list values are values to set parameters}
}
\value{
\code{ParameterSet$new} returns an R6 ParameterSet.

\code{$parameters} either returns an R6 ParameterSet, a data.frame or a row.

\code{$getParameterValue} returns the value of a parameter.

\code{$setParameterValue} returns ParameterSet invisibly.
}
\description{
ParameterSets are passed to a \code{Distribution$new} constructor when
 creating a custom probability distribution that takes parameters.
}
\details{
An R6 ParameterSet is required to construct a custom Probability Distribution
 that takes parameters. This constructor ensures that the correct format of parameters
 is supplied to the disitribution.

 Each parameter requires a unique one-word \code{id} that is used to get and set parameters
 after construction. A parameter can be \code{settable} and \code{fittable}. A \code{settable}
 parameter is one that can be updated after construction of a distribution via \code{$setParameterValue}.
 The Distribution is parameterised by whichever parameters are given as settable.
 Non-settable parameters are either constant or can be automatically update if an \code{updateFunc} is
 provided. \code{updateFunc} should be provided as a string that could be understood in the
 body of a function by a Distribution object, i.e. by naming parameters via \code{$getParameterValue}, see examples.
 A \code{fittable} parameter is one that can be estimated via inference methods, see examples.

 Internally after calling \code{$setParameterValue}, \code{$update} is called to update the
 value of non-settable functions.
}
\section{Usage}{
 ParameterSet$new(id, value, lower, upper, class, settable, fittable,
   updateFunc = NULL, description = NULL)

 $parameters(id, as.df = F)

 $getParameterValue(id)

 $setParameterValue(lst)
}

\examples{
 id = list("prob", "size")
 value = list(0.2, 5)
 lower = list(0, 1)
 upper = list(1, Inf)
 class = list("numeric","integer")
 settable = list(TRUE, TRUE)
 fittable = list(TRUE, FALSE)
 description = list("Probability of success",NULL)
 ps = ParameterSet$new(id, value, lower, upper, class, settable, fittable,
    description = description)
 ps$parameters()
 ps$getParameterValue("prob")


 id = list("rate", "scale")
 value = list(1, 1)
 lower = list(0, 0)
 upper = list(Inf, Inf)
 class = list("numeric","numeric")
 settable = list(TRUE, FALSE)
 fittable = list(TRUE, FALSE)
 updateFunc = list(NULL, "1/self$getParameterValue('rate')")
 description = list("Arrival rate","Scale parameter")
 ps = ParameterSet$new(id, value, lower, upper, class, settable, fittable,
   updateFunc, description)
 ps$parameters(id = "rate")
 ps$setParameterValue(list(rate = 2)) # Automatically calls $update
 ps$getParameterValue("scale") # Auto-updated to 1/2

}
\seealso{
\code{\link{Distribution}}
}
