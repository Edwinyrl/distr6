devtools::load_all("/users/raphael/github/distr6")
devtools::check("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
rbind
??rbind.ParameterSet
?rbind.ParameterSet
checkmate::assert(length(id)==length(value), length(id)==length(settable),
length(id)==length(fittable),
length(id)==length(class), length(id)==length(lower),
length(id)==length(upper), combine = "and",
.var.name = "all arguments must be of same length")
if(!is.null(description))
checkmate::assert(length(id)==length(description), .var.name = "all arguments must be of same length")
if(!is.null(updateFunc))
checkmate::assert(length(id)==length(updateFunc), .var.name = "all arguments must be of same length")
checkmate::assert(!any(duplicated(id)), .var.name = "'id's must be unique")
params = data.frame()
for(i in 1:length(id)){
a_id = id[[i]]
checkmate::assertCharacter(a_id,.var.name = "'id' must be character")
checkmate::assert(length(strsplit(a_id," ",fixed=T)[[1]])==1,
.var.name = "'id' must be one word")
a_settable  = settable[[i]]
checkmate::assertLogical(a_settable, .var.name = "'settable' must be logical")
a_fittable  = fittable[[i]]
checkmate::assertLogical(a_fittable, .var.name = "'fittable' must be logical")
a_class = class[[i]]
checkmate::assert(a_class == "numeric", a_class == "integer",
.var.name = "'class' must be one of: 'numeric' or 'integer'")
if(!is.null(description)){
a_description = description[[i]]
if(is.null(a_description)) a_description = "None"
checkmate::assertCharacter(a_description,.var.name = "'description' must be character")
} else
a_description = "None"
if(!is.null(updateFunc)){
a_update = updateFunc[[i]]
if(is.null(a_update))
a_update = NA
} else
a_update = NA
a_lower = ifelse(lower[[i]] == -Inf, lower[[i]], as(lower[[i]], a_class))
a_upper = ifelse(upper[[i]] == Inf, upper[[i]], as(upper[[i]], a_class))
a_value = as(value[[i]], a_class)
checkmate::assert(a_value >= a_lower, a_value <= a_upper, combine = "and",
.var.name = "'value' should be between 'lower' and 'upper'")
a_param = data.frame(id = a_id, value = a_value, lower = a_lower,
upper = a_upper, class = a_class, settable = a_settable,
fittable = a_fittable, description = a_description,
updateFunc = a_update,
stringsAsFactors = F)
params =
lsf.str("package:distr6")
lsf.str("package:distr6")
getAnywhere(rbind.ParameterSet)
devtools::load_all("/users/raphael/github/distr6")
?rbind
isGeneric("rbind")
isGeneric(rbind)
rbind.ParameterSet <- function(x,...){
x$rbind(...)
}
library(testthat)
context("ParameterSet")
as.ParameterSet(list(id = "Test", value = 2, lower = 1, upper = 5,
class = "integer", settable = F, fittable = F))
ps1 = devtools::load_all("/users/raphael/github/distr6")
ps1 = as.ParameterSet(list(id = "Test", value = 2, lower = 1, upper = 5,
class = "integer", settable = F, fittable = F))
ps2 = as.ParameterSet(data.frame(id = "Test", value = 2, lower = 1, upper = 5,
class = "integer", settable = F, fittable = F,
stringsAsFactors = F))
rbind(ps1,ps2)
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
valueSupport(Binomial$new())
valueSupport.Distribution(Binomial$new())
valueSupport.Distribution(Binomial$new())
valueSupport(Binomial$new())
class(Binomial$new())
valueSupport(Distribution$new("test",pdf=dbinom))
valueSupport.Distribution(Distribution$new("test",pdf=dbinom))
median.Distribution(Distribution$new("test",pdf=dbinom))
median(Distribution$new("test",pdf=dbinom))
isGeneric("median")
isGeneric(median)
isS3stdGeneric("cbind")
isS3stdGeneric(cbind)
isS3stdGeneric("rbind")
isS3stdGeneric(rbind)
isS3method("rbind")
isS3method(f="rbind")
isS3method(f=rbind)
methods("rbind")
methods(rbind)
?methods
methods(rbind)
methods(rbind)
suppressWarnings(suppressMessages((try(methods(rbind),silent=T))))
devtools::load_all("/users/raphael/github/distr6")
obj = ParameterSet
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
length(methods)
i  = 6
methodname = names(methods)[[i]]
methodname
getter = get0(methodname, envir = getEnvir)
getEnvir = "package:distr6"
getter = get0(methodname, envir = getEnvir)
getEnvir = as.environment("package:distr6")
getter = get0(methodname, envir = getEnvir)
getter
getEnvir
getter
x = FALSE
generic = FALSE
!is.null(getter)
x = suppressWarnings(suppressMessages((try(methods(getter),silent=T))))
x
methods(getter)
getter
name(getters)
getter
methodname
methods(methodname)
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
class(x)!="try-error"
x = suppressWarnings(suppressMessages(methods(methodname)))
x
length(x) > 0
methods("rbind")
methods("rbindas")
methodname
generic = FALSE
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
class(x)!="try-error"
length(x) > 0
generic = TRUE
!generic
y = "Distribution"
method = paste(methodname,y$classname,sep=".")
y = Distribution
method = paste(methodname,y$classname,sep=".")
method
value = function(x, ...){}
value
body(value) = substitute({
args = list(...)
do.call(x[[method]], args)
},list(method=methodname))
value
paste0(method)
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
rbind(data.frame(a),data.frame(b))
rbind(data.frame(1),data.frame(2))
rbind(data.frame(a=1),data.frame(a=2))
median(Binomial$new())
median(Binomial$new())
source('~/GitHub/R62S3/R/R62S3.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S3(printMachine)
pm$printer("Test String A")
printer(pm, "Test String B"
)
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
methods(lbind)
methods("lbind")
methods("rbind")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
nogen <- R6::R6Class("nogen",public = list(lbind = function() return("Test No Gen")))
test_that("no generic",{
expect_silent(R62S3(nogen))
expect_equal(lbind(nogen), "Test No Gen")
})
expect_silent(R62S3(nogen))
expect_equal(lbind(nogen$new()), "Test No Gen")
expect_silent(get("lbind"))
expect_silent(get("lbind.nogen"))
expect_silent(R62S3(gen))
gen <- R6::R6Class("gen",public = list(rbind = function() return("Test Gen")))
expect_silent(R62S3(gen))
expect_equal(rbind(gen$new()), "Test Gen")
expect_silent(get("rbind.gen"))
expect_silent(get("rbind"))
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::build_wi
?devtools::build_win
check_win_devel("distr6")
devtools::check_win_devel("R62S3")
devtools::check_win_devel(R62S3)
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::revdep("/users/raphael/github/r62s3")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
ls(name=parent.env(environment()))
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
R62S3::R62S3
R62S3::R62S3
devtools::load_all("/users/raphael/github/distr6")
SpecialSet
SpecialSet$new()
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
dimension.setInterval
dimension
SetInterval$new()
SetInterval$new(1)
SetInterval$new(1,2)
SetInterval$new(1,2,3)
SetInterval$new(1,2,3,4)
SetInterval$new(1,2,3,4,2)
dimension(SetInterval$new(1,2,3,4,2))
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
as.environment("package:distr6")
source('~/GitHub/distr6/R/zzz.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/distr6/R/zzz.R')
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
R62S3(SetInterval)
R62S3(SetInterval, getEnvir = "package:distr6")
R62S3(SetInterval, getEnvir = "package:distr6", assignEnvir = "package:distr6")
source('~/GitHub/R62S3/R/R62S3.R')
R62S3(SetInterval, assignEnvir = "package:distr6")
R62S3(SetInterval, assignEnvir = as.environment("package:distr6"))
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::check_win_oldrelease("/users/raphael/github/r62s3")
devtools::check_win_oldrelease("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::release("/users/raphael/github/r62s3")
install.packages(c("cluster", "nlme"))
devtools::release("/users/raphael/github/r62s3")
install.packages("devtools")
devtools::release("/users/raphael/github/r62s3")
install.packages("maps")
install.packages("ggplot2")
library(maps)
library(ggplot2)
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
install.packages("ggmap")
library(ggmap)
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','France','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
install.packages("mapproj")
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
country <- c(
Ireland,
Sweden,
United Kingdom,
France,
Luxembourg,
Israel,
Netherlands,
Denmark,
Norway,
Germany,
Spain,
Switzerland,
Italy,
Ukraine,
Austria,
Russia,
Belgium,
Monaco,
Turkey,
Azerbaijan,
Greece,
Estonia,
Latvia,
Serbia,
Yugoslavia,
Finland,
Portugal,
Iceland,
Malta,
Bulgaria,
Cyprus,
Australia,
Poland,
Serbia and Montenegro,
Romania,
Bosnia and Herzegovina,
Moldova,
Croatia,
Hungary,
Armenia,
Albania,
Lithuania,
Belarus,
Czech Republic,
Slovenia,
Georgia,
Macedonia,
Montenegro,
Slovakia,
Morocco,
San Marino,
Andorra
)
install.packages("R62S3")
citation("R62S3")
install.packages("badgecreatr")
library(badgecreatr)
?badgecreatr
cite("R62S3")
citation("R62S3")
setwd("~/GitHub/distr6")
devtools::load_all()
View(pdf.Distribution)
density
?density
isGeneric(density)
isGeneric("density")
methodname = "density"
x = tryCatch(methods(methodname),warning = function(w) w, error = function(e) e)
x
inherits(x, "condition")
?distribution
pdf.Distribution(B,1)
pdf.Distribution(Binomial$new(10,0.5),1)
