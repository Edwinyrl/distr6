expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
})
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x1=4,x2=8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(a$pdf(x1 = 1,x2 = 2,x3 = 3), Binomial$new(2,0.1)$pdf(1) * Binomial$new(4,0.6)$pdf(2) * Binomial$new(6,0.2)$pdf(3))
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
expect_equal(a$pdf(x1 = 1,x2 = 2,x3 = 3), Binomial$new(2,0.1)$pdf(1) * Binomial$new(4,0.6)$pdf(2) * Binomial$new(6,0.2)$pdf(3))
library(testthat)
context("Distributions")
test_that("check name validations", {
expect_silent(Distribution$new("Discrete Test","TestDistr", pdf = dbinom))
expect_error(Distribution$new(short_name = "Test Distr", pdf = dbinom))
expect_silent(Distribution$new(short_name = "TestDistr", pdf = dbinom))
expect_silent(Distribution$new(name = "Test Distr", pdf = dbinom))
})
dbin = function(x, log,...){
m1 = choose(self$getParameterValue("size"), x)
m2 = self$getParameterValue("prob")^x
m3 = (1-self$getParameterValue("prob"))^(self$getParameterValue("size") - x)
return(m1 * m2 * m3)
}
test_that("check support", {
expect_equal(Distribution$new("Discrete Test",valueSupport = "c", pdf = dbinom)$valueSupport(), "continuous")
expect_equal(Distribution$new("Discrete Test",valueSupport = "d", pdf = dbinom)$valueSupport(), "discrete")
expect_equal(Distribution$new("Discrete Test",valueSupport = "m", pdf = dbinom)$valueSupport(), "mixture")
expect_error(Distribution$new("Discrete Test",valueSupport = "r", pdf = dbinom))
expect_equal(Distribution$new("Discrete Test", pdf = dbinom)$valueSupport(), "continuous")
})
test_that("check variate", {
dbin = function(x){
m1 = choose(self$getParameterValue("size"), x)
m2 = self$getParameterValue("prob")^x
m3 = (1-self$getParameterValue("prob"))^(self$getParameterValue("size") - x)
return(m1 * m2 * m3)
}
expect_equal(Distribution$new("Discrete Test",variateForm = "u", pdf = dbinom)$variateForm(), "univariate")
expect_equal(Distribution$new("Discrete Test",variateForm = "mu", pdf = dbinom)$variateForm(), "multivariate")
expect_equal(Distribution$new("Discrete Test",variateForm = "ma", pdf = dbinom)$variateForm(), "matrixvariate")
expect_error(Distribution$new("Discrete Test",variateForm = "m", pdf = dbinom))
expect_error(Distribution$new("Discrete Test",variateForm = "d", pdf = dbinom))
expect_equal(Distribution$new("Discrete Test", pdf = dbin)$variateForm(), "univariate")
expect_equal(Distribution$new("Discrete Test", pdf = function(x,y) return("Test"), type = Reals$new(2))$variateForm(), "multivariate")
})
test_that("check multivariate", {
expect_error(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,z) return("Test"),
type = Reals$new(2)))
expect_error(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y,z) return("Test"),
type = Reals$new(2)))
expect_silent(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y) return("Test"),
type = Reals$new(2)))
expect_equal(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y) return("Test"))$type()$dimension(),2)
})
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
test_that("check r/d/p/q", {
expect_silent(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
})
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(x=1)
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(x = 1)
devtools::load_all()
source('~/GitHub/distr6/R/Distribution.R')
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
warnings()
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
decorate(discreteTester,CoreStatistics)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
decorate(discreteTester,CoreStatistics)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps, decorators = list(CoreStatistics))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
decorate(discreteTester,list(CoreStatistics))
decorate(discreteTester,list(CoreStatistics),R62S3 = F)
decorate(discreteTester,list(CoreStatistics),R62S3 = T)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
decorate(discreteTester,list(CoreStatistics),R62S3 = T)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
decorate(discreteTester,list(CoreStatistics),R62S3 = F)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps
# decorators = list(CoreStatistics), R62S3 = FALSE
)
decorat(discreteTester,CoreStatistics)
decorate(discreteTester,CoreStatistics)
discreteTester$kurtosis()
discreteTester$skewness()
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,10),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,10),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps)
testDiscrete(discreteTester)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Set$new(0,10),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
devtools::load_all()
library(testthat)
context("Custom discrete distributions")
dbin = function(x){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Set$new(0,10),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics), R62S3 = FALSE
)
test_that("check all accessors are working", {
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
expect_equal(discreteTester$name, "Discrete Test")
expect_equal(discreteTester$short_name, "TestDistr")
expect_equal(discreteTester$description, NULL)
expect_equal(discreteTester$decorators, "CoreStatistics")
expect_equal(discreteTester$valueSupport(), "discrete")
expect_equal(discreteTester$variateForm(), "univariate")
expect_equal(discreteTester$symmetry(),"symmetric")
expect_equal(discreteTester$getParameterValue("size"), 100)
})
devtools::check()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1=1,x2=2,x3=3)
a$pdf
devtools::load_all()
devtools::check()
mixture <- MixtureDistribution$new(list(Binomial$new(prob = 0.5, size = 10), Binomial$new()))
mixture
mixture$pdf(1)
mixture$pdf(x=1)
mixture$pdf
mixture$pdf(x=1)
testUnivariate(mixture)
source('~/GitHub/distr6/R/Wrapper_ArrayDistribution.R')
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf
a$.__enclos_env__$private$.pdf
source('~/GitHub/distr6/R/Wrapper_ArrayDistribution.R')
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$.__enclos_env__$private$.pdf
a$pdf(x1=1,x2=2,x3=3)
devtools::load_all()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1=1,x2=2,x3=3)
a$.__enclos_env__$private$.pdf
devtools::load_all()
list(prob = 0.2, size = 6)))
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1=1,x2=2,x3=3)
devtools::check()
library(testthat)
context("Array Distributions")
test_that("constructor",{
expect_silent(ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.75, size = 3))))
expect_error(ArrayDistribution$new(Binomial, list(list(prob = 2, size = 2), list(prob = 0.75, size = 3))))
expect_error(ArrayDistribution$new(Binomial, list(list(re = 2, size = 2), list(prob = 0.75, size = 3))))
expect_error(ArrayDistribution$new(Dist, list(list(prob = 0.1, size = 2), list(prob = 0.75, size = 3))))
})
test_that("pdf/cdf",{
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
expect_equal(a$pdf(x1 = 1,x2 = 2,x3 = 3), Binomial$new(2,0.1)$pdf(1) * Binomial$new(4,0.6)$pdf(2) * Binomial$new(6,0.2)$pdf(3))
expect_equal(a$cdf(x1 = 1,x2 = 2,x3 = 3), Binomial$new(2,0.1)$cdf(1) * Binomial$new(4,0.6)$cdf(2) * Binomial$new(6,0.2)$cdf(3))
})
devtools::load_all()
devtools::check()
library(testthat)
context("Mixture")
test_that("check continuous Mixture wrapper", {
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
})
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
mixExp
mixExp$pdf(1:10)
Exponential$new()$pdf(1:10)
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
devtools::load_all()
devtools::check()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
continuousTester$rand(1)
continuousTester$quantile(1)
continuousTester$rand(1)
expect_silent(continuousTester$rand(1))
devtools::load_all()
devtools::check()
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_message(continuousTester$quantile(1))
expect_message(continuousTester$rand(1))
})
continuousTester$pdf(1)
devtools::load_all()
devtools::check()
p.adjust(c(0.1),method="BH")
p.adjust(rep(0.01,2),method="BH")
p.adjust(rep(0.01,10),method="BH")
p.adjust(c(0.01,0.2,0.12,0.007),method="BH")
p.adjust(c(0.01,0.2,0.12,0.007,0.43,0.634,0.001,0.0002,0.01),method="BH")
