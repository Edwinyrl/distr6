})
decorate(continuousTester, FunctionImputation)
devtools::load_all()
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
continuousTester$cdf(1)
continuousTester$cdf
continuousTester$cdf(1)
continuousTester$.__enclos_env__$private$.cdf
continuousTester$.__enclos_env__$private$.pdf
devtools::load_all()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
expect_silent(continuousTester$quantile(1))
expect_silent(continuousTester$rand(1))
})
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
expect_silent(continuousTester$quantile(1))
continuousTester$quantile(1)
continuousTester$quantile
continuousTester$.__enclos_env__$private$.quantile
continuousTester$cdf(1)
continuousTester$.__enclos_env__$private$.cdf()
continuousTester$.__enclos_env__$private$.cdf(1)
continuousTester$.__enclos_env__$private$.cdf
integrate(continuousTester$pdf, continuousTester$sup(), 1)
continuousTester$pdf
integrate(continuousTester$.__enclos_env__$private$.pdf, continuousTester$sup(), 1)
continuousTester$.__enclos_env__$private$.pdf
devtools::load_all()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
expect_silent(continuousTester$quantile(1))
expect_silent(continuousTester$rand(1))
})
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
continuousTester$cdf(1)
continuousTester$cdf
continuousTester$.__enclos_env__$private$.cdf
continuousTester$cdf(1)
continuousTester$.__enclos_env__$private$.cdf(1)
continuousTester$.__enclos_env__$private$.cdf
devtools::load_all()
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
expect_silent(continuousTester$quantile(1))
expect_silent(continuousTester$rand(1))
})
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_silent(continuousTester$cdf(1))
expect_silent(continuousTester$quantile(1))
expect_silent(continuousTester$rand(1))
})
expect_silent(continuousTester$cdf(1))
expect_message(continuousTester$cdf(1))
continuousTester$cdf(1)
continuousTester$quantile(1)
expect_null(continuousTester$quantile(1))
continuousTester$rand(1)
expect_null(continuousTester$rand(1))
devtools::load_all()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
continuousTester$rand(1))
continuousTester$rand(1)
continuousTester$quantile(1)
continuousTester$rand(1)
devtools::load_all()
continuousTester$rand(1)
continuousTester$rand(1)
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
decorate(continuousTester, FunctionImputation)
continuousTester$.__enclos_env__$private$.rand
continuousTester$.__enclos_env__$private$.rand(1)
continuousTester$.__enclos_env__$private$.rand(2)
continuousTester$.__enclos_env__$private$.rand(3)
continuousTester$quantile(1)
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), decorators = ExoticStatistics,
R62S3 = FALSE)
x
x$pdf(1)
x$pdf(2)
x$pdf(3)
x$pdf(4)
x$pdf(5)
x$pdf(6)
decorate(x,FunctionImputation)
x$cdf(1)
x$cdf(2)
x$cdf(3)
x$inf()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval(1,4))
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x
decorate(x, FunctionImputation, R62S3 = FALSE)
x$cdf(1)
x$cdf(2)
x$cdf(3)
x$cdf(4)
x$pdf(1)
x$pdf(2)
x$pdf(3)
x = Distribution$new("Test", pdf = function(x) ifelse(x < 1 | x > 4, 0, 1/(4-1), support = Interval$new(1,4))
)
x
x$pdf(1)
x = Distribution$new("Test", pdf = function(x) ifelse(x < 1 | x > 4, 0, 1/(4-1)),
support = Interval$new(1,4))
x
x$pdf(1)
x$pdf(0)
x$pdf(0.9)
x$pdf(4)
x$pdf(4.1)
decorate(x, FunctionImputation, R62S3 = FALSE)
x$cdf(1)
x$cdf(2)
x$cdf(3)
x$cdf(4)
lot(x$pdf(1:4))
plot(x$pdf(1:4))
plot(x$pdf(0:5),type="l")
plot(x$pdf(seq.int(0,5,by=0.001)),type="l")
plot(x$cdf(seq.int(0,5,by=0.001)),type="l")
y = x
devtools::load_all()
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x
x$pdf(0)
x$pdf
x$liesInSupport(1)
x$liesInSupport(0)
x$liesInSupport(0,all=F)
0[x$liesInSupport(0,all=F)]
0[!x$liesInSupport(0,all=F)]
devtools::load_all()
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x
x$pdf(0)
x$pdf(0.9)
decorate(x, FunctionImputation, R62S3 = FALSE)
x$cdf(1)
devtools::load_all()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
fittable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
= Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x
x$pdf(0)
x$pdf(0.9)
x$pdf(0:5)
x$cdf(0:5)
x$pdf(0:5)
x$pdf
x =  0:5
self = x
testUnivariate(self)
x
self = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
testUnivariate(self)
pdf = x
pdf[!self$liesInSupport(x, all = F)] = 0
pdf
all(pdf==0)
pdf.in = try(private$.pdf(y[self$liesInSupport(x, all = F)],...), silent = T)
private
pdf.in
private = self$.__enclos_env__$private
pdf.in = try(private$.pdf(y[self$liesInSupport(x, all = F)],...), silent = T)
pdf.in
private$.pdf
pdf.in = try(private$.pdf(y[self$liesInSupport(x, all = F)]), silent = T)
pdf.in
self$liesInSupport(x, all = F)
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x
x$pdf(0)
x$pdf(5)
x$pdf(0:5)
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x$pdf(0:5)
x$pdf
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x$pdf(0:5)
x$pdf
self = x
x = 0:5
private = self$.__enclos_env__$private
pdf = x
pdf[!self$liesInSupport(x, all = F)] = 0
if(all(pdf==0)) return(0)
pdf.in = sapply(pdf[self$liesInSupport(x, all = F)], function(x0) private$.pdf(x0,...))
pdf.in = sapply(pdf[self$liesInSupport(x, all = F)], function(x0) private$.pdf(x0))
pdf.in
pdf[self$liesInSupport(x, all = F)]
pdf[self$liesInSupport(x, all = F)] = pdf.in
pdf
source('~/GitHub/distr6/R/Distribution.R')
devtools
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x$pdf(0:5)
decorate(x, FunctionImputation, R62S3 = FALSE)
x$cdf(1)
plot(x$pdf(seq.int(0,5,by=0.001)),type="l")
plot(x$cdf(seq.int(0,5,by=0.001)),type="l")
x$sup()
x$sup() > 1:5
1:5 > x$sup()
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
x$pdf(0:5)
x$cdf(0:5)
decorate(x, FunctionImputation, R62S3 = FALSE)
x$cdf(0:5)
dexp(0)
dbinom(0,10,0.5)
dbinom(10,10,0.5)
pbinom(10,10,0.5)
pbinom(0,10,0.5)
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
decorate(x, FunctionImputation, R62S3 = FALSE)
x$pdf(0:5)
x$cdf(0:5)
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4))
decorate(x, FunctionImputation, R62S3 = FALSE)
x$pdf(0:5)
x$cdf(0:5)
punif(0:5,min=0,ax=4)
punif(0:5,min=0,max=4)
punif(0:5,min=1,max=4)
dunif(0:5,min=1,max=4)
x$pdf(0:5)
x$cdf(0:5)
x$cdf(2)
x$cdf(1)
punif(1,1,4)
x$.__enclos_env__$private$.cdf(1)
x$.__enclos_env__$private$.cdf
integrate(x$pdf,1,1)
x$inf()
integrate(x$pdf,x$inf(),1)
integrate(x$pdf,x$inf(),1)$value()
integrate(x$pdf,x$inf(),1)$value
q=1
self=x
cdf = q
cdf[q >= self$sup()] = 1
cdf[q < self$inf()] = 0
cdf
cdf.in = sapply(cdf[q < self$sup() & q >= self$inf()], function(q0) private$.cdf(q0,...))
private = self$.__enclos_env__$private
cdf.in = sapply(cdf[q < self$sup() & q >= self$inf()], function(q0) private$.cdf(q0,...))
cdf.in = sapply(cdf[q < self$sup() & q >= self$inf()], function(q0) private$.cdf(q0))
cdf.in
q < self$sup() & q >= self$inf()
q
cdf
cdf[q < self$sup() & q >= self$inf()]
private$.cdf(1)
private$.cdf
self$pdf
self$inf
self$inf()
private$.cdf(1)
self$.__enclos_env__$private$.cdf(1)
self$cdf(1)
integrate(self$pdf, lower = self$inf(), upper = q)$value)
integrate(self$pdf, lower = self$inf(), upper = q)$value
testContinuous(self)
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4), type = Reals$new())
x
x$valueSupport()
class(x$support())
source('~/GitHub/distr6/R/Distribution.R')
devtools::load_all()
x = Distribution$new("Test", pdf = function(x) 1/(4-1), support = Interval$new(1,4), type = Reals$new())
decorate(x, FunctionImputation, R62S3 = FALSE)
x$pdf(0:5)
x$cdf(0:5)
plot(x$pdf(seq.int(0,5,by=0.001)),type="l")
plot(x$cdf(seq.int(0,5,by=0.001)),type="l")
plot(x$cdf(seq.int(0,5,by=0.01)),type="l")
plot(suppressMessages(x$cdf(seq.int(0,5,by=0.01)),type="l"))
plot(suppressMessages(x$cdf(seq.int(0,5,by=0.01))),type="l")
plot(x$pdf(seq.int(0,5,by=0.001)),type="l")
plot(x$pdf(0:5))
plot(x$cdf(0:5))
devtools::document()
devtools::load_all()
devtools::check()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a
a$pdf(1,2,3)
a$pdf
a$pdf(x1=1,x2=2,x3=3)
a$.__enclos_env__$private$.pdf
testUnivariate(a)
a$.__enclos_env__$private$.pdf1,2,3
a$.__enclos_env__$private$.pdf(1,2,3)
a$pdf(x1=1,x2=2,x3=3)
a$pdf(x1 = 1,x2 = 2,x3 = 3)
a$pdf(x1 = 1,x2 = 2,x3 = 3)
a$pdf
source('~/GitHub/distr6/R/Distribution.R')
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1 = 1,x2 = 2,x3 = 3)
devtools::load_all()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1 = 1,x2 = 2,x3 = 3)
testUnivariate(a)
devtools::load_all()
a$pdf(x1 = 1,x2 = 2,x3 = 3)
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1 = 1,x2 = 2,x3 = 3)
devtools::load_all()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(x1 = 1,x2 = 2,x3 = 3)
a$pdf
a$pdf(1)
a$pdf
devtools::load_all()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(1)
a$wrappedModels()
a$pdf
a$pdf(1)
prodBin <- ProductDistribution$new(Binomial$new(prob = 0.5, size = 10),
Binomial$new(prob = 0.5, size = 20))
rodBin$pdf(2, y =3)
prodBin$pdf(2, y =3)
a$.__enclos_env__$private$.pdf
a$.__enclos_env__$private$.pdf(1)
a$pdf
devtools::load_all()
a = ArrayDistribution$new(Binomial, list(list(prob = 0.1, size = 2), list(prob = 0.6, size = 4),
list(prob = 0.2, size = 6)))
a$pdf(1)
a$.__enclos_env__$super$pdf
a$pdf
