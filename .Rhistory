method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
value
setMethod(methodname, y$classname, def = value, where = assignEnvir)
setMethod(methodname, Distribution, def = value, where = assignEnvir)
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
?setMethod
setMethod(methodname, "R6", def = value, where = assignEnvir)
setOldClass("Distribution")
setMethod(methodname, "R6", def = value, where = assignEnvir)
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
Distribution
showMethods("skewness")
skewness(Binomial$new())
skewness()
skewness.Distribution(Binomial$new())
skewness.Distribution
skewness
showMethods("skewness")
getMethod("skewness")
obj = ExoticStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 8
methodname = names(methods)[[i]]
generic = FALSE
setGeneric(methodname, def = value, where = assignEnvir)
survivalPNorm
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
survivalPNorm.Distribution
survivalPNorm
showMethods("survivalPNorm")
survivalPNorm(Binomial$new())
devtools::document()
devtools::load_all()
obj = CoreStatistics
devtools::document()
devtools::load_all()
obj = CoreStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 1
methodname = names(methods)[[i]]
generic = FALSE
value = function(object,...){}
body(value) = substitute({
UseMethod(y, object)
},list(y=methodname))
setGeneric(methodname, def = value, where = assignEnvir)
mgf
showMethods("mgf")
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
mgf
showMethods("mgf")
mgf(Binomial$new())
mgf(Distribution$new())
mgf(Distribution$new(pdf = dbinom))
mgf(Distribution$new(pdf = dbinom, name = "t"))
mgf(Distribution$new(pdf = dbinom, name = "t"), 1)
mgf
showMethods("mgf")
mgf(Binomial$new())
mgf(Binomial$new(),1)
getMethod("mgf","Distribution")
method = paste(methodname,y$classname,sep=".")
value = function(){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
value
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
?setGeneric
setGeneric(methodname)
mgf
method = paste(methodname,y$classname,sep=".")
value = function(){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
rm(mgf)
mgf
setGeneric(methodname)
value = function(...){}
setGeneric(methodname, def = value, where = assignEnvir)
mgf
method = paste(methodname,y$classname,sep=".")
value = function(){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
mgf
getMethod("mgf","Distribution")
mgf(Distribution$new("t",pdf=dbinom))
?setMethod
method = paste(methodname,y$classname,sep=".")
value = function(){}
formals(value) = c(object, formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
mgf
mgf.Distribution
showMethods("mgf")
mgf(Distribution$new("t",pdf=dbinom))
?do.call
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
print(object)
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
mgf(Distribution$new("t",pdf=dbinom))
rm(mgf)
setGeneric(methodname, def = value, where = assignEnvir)
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
print(object)
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("Distribution")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
mgf(Distribution$new("t",pdf=dbinom))
getMethod("mgf","Distribution")
mgf(Distribution$new("t",pdf=dbinom))
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
obj = printMachine
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 1
methodname = names(methods)[[i]]
generic = FALSE
methodname
generic
setGeneric(methodname, def = value, where = assignEnvir)
assignEnvir = .GlobalEnv
setGeneric(methodname, def = value, where = assignEnvir)
value = function(...){}
setGeneric(methodname, def = value, where = assignEnvir)
value = function(object, ...){}
setGeneric(methodname, def = value, where = assignEnvir)
printer
y = printer
method = paste(methodname,y$classname,sep=".")
value = function(object){}
method = paste(methodname,y$classname,sep=".")
methodname
y
y = printMachine
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
print(object)
do.call(object[[method]], args)
},list(method=methodname))
value
setOldClass("printMachine")
setMethod(methodname, "Distribution", def = value, where = assignEnvir)
printMachine
methodname
printer
printer(pm)
pm[["printer"]]
pm[["printer"]]()
pm[["printer"]]("l")
printer(pm,"l")
class(pm)
showMethods("printer")
setMethod(methodname, "printMachine", def = value, where = assignEnvir)
printer(pm,"l")
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
setOldClass("printMachine")
setMethod(methodname, "printMachine", def = value, where = assignEnvir)
printer(pm,"l")
printer(pm,"lsdfds")
y$classname
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine, assignEnvir = .GlobalEnv)
source('~/GitHub/R62S3/R/R62S4.R')
R62S4(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
x = tryCatch(methods(methodname),warning = function(w) w, error = function(e) e)
x
methodname = "printer"
x = tryCatch(methods(methodname),warning = function(w) w, error = function(e) e)
x
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
obj = printMachine
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
i=1
methodname = names(methods)[[i]]
method = paste(methodname,y$classname,sep=".")
value = function(object){}
methodname
method
method = paste(methodname,y$classname,sep=".")
method = paste(methodname,obj$classname,sep=".")
method
methodname = names(methods)[[i]]
methodname
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
value
methodname = names(methods)[[i]]
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
value
assign(methodname, value, where = assignEnvir)
?assign
assign(methodname, value, envir = assignEnvir)
assignEnvir = .GlobalEnvir
assignEnvir = .GlobalEnv
assign(methodname, value, envir = assignEnvir)
printer
printer(pm,"3")
printer(pm,"fdf")
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62Fun(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
R62Fun(printMachine, assignEnvir = .GlobalEnv)
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62Fun(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
source('~/GitHub/R62S3/R/R62Fun.R')
rm(R62SFun)
R62Fun(printMachine, assignEnvir = .GlobalEnv)
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62Fun(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
setwd("~/GitHub/R62S3")
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
?setMethod
devtools::check()
#' @examples
#' printMachine <- R6::R6Class("printMachine",
#'public = list(initialize = function() {},
#'printer = function(str) {print(str)}))
#' pm <- printMachine$new()
#' R62S4(printMachine, assignEnvir = .GlobalEnv)
#' pm$printer("Test String A")
#' printer(pm, "Test String B")
#'
#' @export
R62S4 <- function(R6Class, dispatchClasses = list(R6Class),
assignEnvir = parent.env(environment()), mask = FALSE){
checkmate::assert(inherits(R6Class,"R6ClassGenerator"),
.var.name = "R6Class must be an R6ClassGenerator")
obj = R6Class
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
if(length(methods)>0){
for(i in 1:length(methods)){
methodname = names(methods)[[i]]
generic = FALSE
if(mask){
x = tryCatch(methods(methodname),warning = function(w) w, error = function(e) e)
if(inherits(x, "condition")){
if(!grepl("appears not to be S4 generic",x$message) & !inherits(x, "error"))
generic = TRUE
} else
generic = TRUE
} else{
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
if(class(x)!="try-error"){
if(length(x) > 0)
generic = TRUE
}
}
if(!generic){
value = function(object, ...){}
methods::setGeneric(methodname, def = value, where = assignEnvir)
}
lapply(dispatchClasses, function(y){
methods::setOldClass(y$classname)
method = paste(methodname,y$classname,sep=".")
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]),alist(...=))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname))
methods::setMethod(methodname, y$classname, def = value, where = assignEnvir)
})
}
}
}
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
?setGeneric
source('~/GitHub/R62S3/R/R62S4.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
setGeneric
thisPackage
getPackageName()
getPackageName(parent.frame(environment()))
getPackageName(parent.env(environment()))
?setMethod
?setGeneric
source('~/GitHub/R62S3/R/R62S4.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
source('~/GitHub/R62S3/R/R62S4.R')
source('~/GitHub/R62S3/R/R62S4.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine, assignEnvir = .GlobalEnv)
pm$printer("Test String A")
printer(pm, "Test String B")
R62S4(printMachine)
printer(pm, "Test String B")
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
source('~/GitHub/R62S3/R/R62S4.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine)
pm$printer("Test String A")
printer(pm, "Test String B")
devtools::check()
source('~/GitHub/R62S3/R/R62S4.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S4(printMachine)
pm$printer("Test String A")
printer(pm, "Test String B")
devtools::check()
devtools::check()
setwd("~/GitHub/distr6")
devtools::check()
devtools::document()
devtools::load_all()
?pgf
devtools::check()
devtools::document()
#' is computed.
#'
#' Documentation is for the S3 method, the first parameter can be omitted if calling as
#' an R6 method. CoreStatistics methods can only be used if the distribution has first been decorated
#' with \code{decorate(Distribution, CoreStatistics)}.
#'
#' @seealso \code{\link{decorate}} for the decorator function and \code{\link{CoreStatistics}} and
#' \code{\link{ExoticStatistics}} for other available methods for decorating.
#'
#' @export
NULL
#' is computed.
#'
#' Documentation is for the S3 method, the first parameter can be omitted if calling as
#' an R6 method. CoreStatistics methods can only be used if the distribution has first been decorated
#' with \code{decorate(Distribution, CoreStatistics)}.
#'
#' @seealso \code{\link{decorate}} for the decorator function and \code{\link{CoreStatistics}} and
#' \code{\link{ExoticStatistics}} for other available methods for decorating.
#'
#' @export
NULL
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
