x
y
y$setParameterValue(list(prob = 0.1))
y
x
source('~/GitHub/distr6/R/Distribution_Binomial.R')
x = Binomial$new()
y = Binomial$new()
x
y
y$setParameterValue(list(prob = 0.1))
y
x
dist1
dist2
source('~/GitHub/distr6/R/Distribution_Binomial.R')
source('~/GitHub/distr6/R/Distribution_Binomial.R')
x = Binomial$new()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
x = Binomial$new()
x$parameters()
x
y = Binomial$new()
x
y
y$setParameterValue(list(prob = 0.1))
y
x
source('~/GitHub/distr6/R/Distribution_Exponential.R')
exp1 = Exponential$new(1)
exp2 = Exponential$new(2)
exp
exp1
exp2
devtools::document()
devtools::load_all()
test_that("pdf/cdf",{
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(4,8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(4,3),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(3))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(4,8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
})
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
test_that("check continuous Truncated wrapper", {
TruncExp = TruncatedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(TruncExp$support()$numeric(), 1:5)
expect_equal(TruncExp$pdf(0), 0)
expect_equal(TruncExp$pdf(6), 0)
})
TruncExp = TruncatedDistribution$new(Exponential$new(), lower = 1, upper = 5)
TruncExp
TruncExp$wrappedModels()
TruncExp$pdf
TruncExp$pdf(1)
TruncExp$pdf(0)
lower
devtools::document()
devtools::load_all()
devtools::check()
library(testthat)
context("Truncation")
test_that("check continuous Truncated wrapper", {
TruncExp = TruncatedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(TruncExp$support()$numeric(), 1:5)
expect_equal(TruncExp$pdf(0), 0)
expect_equal(TruncExp$pdf(6), 0)
})
TruncExp = TruncatedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(TruncExp$support()$numeric(), 1:5)
expect_equal(TruncExp$pdf(0), 0)
TruncExp$pdf
TruncExp$getLowerLimit()
TruncExp$getUpperLimit()
TruncExp$wrappedModels()
TruncExp$wrappedModels()[[1]]
TruncExp$wrappedModels()[[1]]$pdf(0)
TruncExp$wrappedModels()[[1]]$cdf(5)
TruncExp$wrappedModels()[[1]]$cdf(5) - TruncExp$wrappedModels()[[1]]$cdf(1)
list(1,2,3)
sapply(list(1,2,3),is.numeric)
sapply(list(1,2.4,3),is.numeric)
sapply(list(1,2.4,3,"a"),is.numeric)
list(1,2.4,3,"a")[sapply(list(1,2.4,3,"a"),is.numeric)]
dbinom(1)
dbinom(1,10,0.5)
sapply(list(c(1,2.4),3,"a"),is.numeric)
list(c(1,2.4),3,"a")[sapply(list(c(1,2.4),3,"a"),is.numeric)]
sapply(list(c(1,2.4),3,"a")[sapply(list(c(1,2.4),3,"a"),is.numeric)],length)
pbinom(-1,1,0.2)
pbinom(10,1,0.2)
source('~/GitHub/distr6/R/Distribution.R')
library(testthat)
context("Distributions")
test_that("check name validations", {
expect_silent(Distribution$new("Discrete Test","TestDistr", pdf = dbinom))
expect_error(Distribution$new(short_name = "Test Distr", pdf = dbinom))
expect_silent(Distribution$new(short_name = "TestDistr", pdf = dbinom))
expect_silent(Distribution$new(name = "Test Distr", pdf = dbinom))
})
source('~/GitHub/distr6/R/Distribution.R')
test_that("check name validations", {
expect_silent(Distribution$new("Discrete Test","TestDistr", pdf = dbinom))
expect_error(Distribution$new(short_name = "Test Distr", pdf = dbinom))
expect_silent(Distribution$new(short_name = "TestDistr", pdf = dbinom))
expect_silent(Distribution$new(name = "Test Distr", pdf = dbinom))
})
source('~/GitHub/distr6/R/Distribution.R')
test_that("check name validations", {
expect_silent(Distribution$new("Discrete Test","TestDistr", pdf = dbinom))
expect_error(Distribution$new(short_name = "Test Distr", pdf = dbinom))
expect_silent(Distribution$new(short_name = "TestDistr", pdf = dbinom))
expect_silent(Distribution$new(name = "Test Distr", pdf = dbinom))
})
source('~/GitHub/distr6/R/Distribution.R')
test_that("check name validations", {
expect_silent(Distribution$new("Discrete Test","TestDistr", pdf = dbinom))
expect_error(Distribution$new(short_name = "Test Distr", pdf = dbinom))
expect_silent(Distribution$new(short_name = "TestDistr", pdf = dbinom))
expect_silent(Distribution$new(name = "Test Distr", pdf = dbinom))
})
test_that("check support", {
expect_equal(Distribution$new("Discrete Test",valueSupport = "c", pdf = dbinom)$valueSupport(), "continuous")
expect_equal(Distribution$new("Discrete Test",valueSupport = "d", pdf = dbinom)$valueSupport(), "discrete")
expect_equal(Distribution$new("Discrete Test",valueSupport = "m", pdf = dbinom)$valueSupport(), "mixture")
expect_error(Distribution$new("Discrete Test",valueSupport = "r", pdf = dbinom))
expect_equal(Distribution$new("Discrete Test", pdf = dbinom)$valueSupport(), "continuous")
})
test_that("check variate", {
expect_equal(Distribution$new("Discrete Test",variateForm = "u", pdf = dbinom)$variateForm(), "univariate")
expect_equal(Distribution$new("Discrete Test",variateForm = "mu", pdf = dbinom)$variateForm(), "multivariate")
expect_equal(Distribution$new("Discrete Test",variateForm = "ma", pdf = dbinom)$variateForm(), "matrixvariate")
expect_error(Distribution$new("Discrete Test",variateForm = "m", pdf = dbinom))
expect_error(Distribution$new("Discrete Test",variateForm = "d", pdf = dbinom))
expect_equal(Distribution$new("Discrete Test", pdf = dbinom)$variateForm(), "univariate")
expect_equal(Distribution$new("Discrete Test", pdf = function(x,y) return("Test"), type = Reals$new(2))$variateForm(), "multivariate")
})
test_that("check multivariate", {
expect_error(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,z) return("Test"),
type = Reals$new(2)))
expect_error(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y,z) return("Test"),
type = Reals$new(2)))
expect_silent(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y) return("Test"),
type = Reals$new(2)))
expect_error(Distribution$new("Test", pdf = function(x,y) return("Test"),
cdf = function(x,y) return("Test")))
})
test_that("check r/d/p/q", {
expect_error(Distribution$new("Test", pdf = dbinom)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
})
expect_error(Distribution$new("Test", pdf = dbinom)$pdf(1))
Distribution$new("Test", pdf = dbinom)$pdf(1)
Distribution$new("Test", pdf = dbinom)$cdf(1)
Distribution$new("Test", pdf = dbinom)$cdf
x = Distribution$new("Test", pdf = dbinom)
x$.__enclos_env__$private$.cdf(1)
x$.__enclos_env__$private$.cdf
source('~/GitHub/distr6/R/Distribution.R')
test_that("check r/d/p/q", {
expect_error(Distribution$new("Test", pdf = dbinom)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
})
Distribution$new("Test", pdf = dbinom)$pdf(1))
Distribution$new("Test", pdf = dbinom)$pdf(1))
Distribution$new("Test", pdf = dbinom)$pdf(1)
source('~/GitHub/distr6/R/Distribution.R')
Distribution$new("Test", pdf = dbinom)$pdf(1)
x=Distribution$new("Test", pdf = dbinom)$pdf(1)
x=Distribution$new("Test", pdf = dbinom)
x$pdf
x$pdf(1)
dots = list(1)
dots = dots[sapply(dots,is.numeric)]
dots
params = dots
params[!self$liesInSupport(dots, F)] = 0
params[!x$liesInSupport(dots, F)] = 0
params
dots
dots > x$inf()
list(1,2,3) > x$inf()
dbin = function(x, log,...){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
expect_error(Distribution$new("Test", pdf = dbim)$pdf(1))
expect_error(Distribution$new("Test", pdf = dbin)$pdf(1))
Distribution$new("Test", pdf = dbin)$pdf(1))
Distribution$new("Test", pdf = dbin)$pdf(1)
dbin = function(x, log,...){
m1 = choose(self$getParameterValue("size"), x)
m2 = self$getParameterValue("prob")^x
m3 = (1-self$getParameterValue("prob"))^(self$getParameterValue("size") - x)
return(m1 * m2 * m3)
}
test_that("check r/d/p/q", {
expect_error(Distribution$new("Test", pdf = dbin)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
})
Distribution$new("Test", pdf = dbin)$pdf(1)
x = Distribution$new("Test", pdf = dbin)$pdf(1)
x = Distribution$new("Test", pdf = dbin)
x$getParameterValue("size")
x$getParameterValue
x$.__enclos_env__$private$.parameters
expect_error(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
expect_error(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
x = Distribution$new("Test", pdf = dbin, parameters = ps)
x$getParameterValue("size")
choose(100,1)
dots
dots = list(1,2)
dots
?dnorm
x
x$liesInSupport(1)
x$liesInSupport(1:5)
x$liesInSupport(1:5,F)
x$liesInSupport(1:5,T)
x$liesInSupport(1:5)
sapply(list(1,2,3),function(y) x$liesInSupport(y))
sapply(list(1:5,2,3),function(y) x$liesInSupport(y))
sapply(list(1:5,2,3),function(y) x$liesInSupport(y,F))
sapply(list(1:5,2:6,3:7),function(y) x$liesInSupport(y,F))
sapply(list(1:5,2:6,7:11),function(y) x$liesInSupport(y,F))
x
x$setParameterValue(size = 4)
x$setParameterValue(list(size = 4))
x
x$support()
y = Binomial$new()
y$sup()
y
y$support()
y$setParameterValue(list(size = 4))
y$support()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
source('~/GitHub/distr6/R/Distribution_Binomial.R')
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y = Binomial$new()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y = Binomial$new()
y$properties
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y$properties
y = Binomial$new()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y = Binomial$new()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y = Binomial$new()
source('~/GitHub/distr6/R/Distribution_Binomial.R')
y = Binomial$new()
y
y$support()
y$setParameterValue(list(size=2))
y$support()
test_that("check r/d/p/q", {
expect_error(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
})
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
is.list(a)
is.list(1)
is.list(list(1))
pnorm(1,lower.tail = T, log.p = T)
log(pnorm(1))
pnorm(1,lower.tail = F, log.p = T)
log(1-pnorm(1))
qnorm(0.2)
qnorm(0.2,lower.tail = F)
qnorm(0.8,lower.tail = F)
qbinom(0.2,10,0.3,lower.tail = F)
qbinom(0.2,10,0.3,lower.tail = T)
qbinom(0.8,10,0.3,lower.tail = T)
qbinom(0.8,10,0.3,lower.tail = T, log.p = T)
qnorm(0.2, log.p = T)
log(0.2)
qnorm(-1.6)
log(1)
qnorm(1,log.p = T)
qnorm(0)
qbinom(0)
qbinom(0,10,0.5)
qbinom(1,10,0.5)
qbinom(1,10,0.5,log.p=T)
pnorm
qnorm
source('~/GitHub/distr6/R/Distribution.R')
source('~/GitHub/distr6/R/Distribution.R')
source('~/GitHub/distr6/R/Distribution.R')
Distribution$new("Test", pdf = dbin, parameters = ps)$
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
source('~/GitHub/distr6/R/Distribution.R')
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1)
expect_error(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
expect_slent(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
expect_silent(Distribution$new("Test", pdf = dbin, parameters = ps)$pdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$cdf(1))
expect_null(Distribution$new("Test", pdf = dbinom)$quantile(1))
expect_null(Distribution$new("Test", pdf = dbinom)$rand(1))
source('~/GitHub/distr6/R/Wrapper_TruncatedDistribution.R')
devtools::document()
devtools::load_all()
devtools::check()
library(testthat)
context("Product Distribution")
test_that("constructor",{
expect_silent(ProductDistribution$new(Binomial$new(),Binomial$new(size = 20, prob = 0.6)))
expect_silent(ProductDistribution$new(Binomial$new(),Exponential$new()))
})
test_that("type/support/distrDomain",{
expect_equal(ProductDistribution$new(Binomial$new(), Binomial$new())$type()$getSymbol(), PosIntegers$new(2)$getSymbol())
expect_equal(ProductDistribution$new(Binomial$new(size = 2), Binomial$new(size = 3))$support()$getSymbol(),
product(Set$new(0:2),Set$new(0:3))$getSymbol())
expect_equal(ProductDistribution$new(Binomial$new(), Binomial$new())$distrDomain()$getSymbol(), PosIntegers$new(2)$getSymbol())
})
test_that("pdf/cdf",{
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(4,8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(4,3),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(3))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(4,8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
})
ProductDistribution$new(Binomial$new(size = 40, prob = 0.2)
ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))
ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(4,8)
x=ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))
x
x$pdf
x$pdf(x=4,y=8)
test_that("pdf/cdf",{
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=3),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(3))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
})
library(testthat)
context("Mixture")
test_that("check continuous Mixture wrapper", {
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
})
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
mixExp
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
(mixExp$cdf(1:10)
)
Exponential$new()$cdf(1:10)
mixExp
mixExp$cdf
mixExp$.__enclos_env__$private$.cdf
mixExp$.__enclos_env__$private$.cdf(1)
mixExp$.__enclos_env__$private$.cdf(1:10)
(mixExp$cdf(1:10)
)
mixExp$cdf(1:10)
mixExp$cdf
source('~/GitHub/distr6/R/Distribution.R')
test_that("check continuous Mixture wrapper", {
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
})
source('~/GitHub/distr6/R/Distribution.R')
test_that("check continuous Mixture wrapper", {
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
})
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
mixExp
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
mixExp$cdf
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
test_that("pdf/cdf",{
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=3),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(3))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
})
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$pdf(x=4,y=3),
Binomial$new(size = 40, prob = 0.2)$pdf(4) * Binomial$new(size = 5, prob = 0.9)$pdf(3))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(x=4,y=8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
expect_equal(ProductDistribution$new(Binomial$new(size = 40, prob = 0.2), Binomial$new(size = 5, prob = 0.9))$cdf(q=4,y=8),
Binomial$new(size = 40, prob = 0.2)$cdf(4) * Binomial$new(size = 5, prob = 0.9)$cdf(8))
devtools::document()
devtools::load_all()
devtools::check()
expect_silent(listDistributions())
listDistributions()
y = sapply(ls(name="package:distr6"),function(x){
if(inherits(get(x),"R6ClassGenerator")){
if(environmentName(get(x)$get_inherit()) == "Distribution_generator")
return(get(x)$classname)
else
return(FALSE)
} else
return(FALSE)
})
y
#' @title Lists Implemented R6 Distributions
#' @description Lists R6 distributions, either all in a data.frame or filtered by chosen
#' traits and/or properties.
#' @param simplify logical.
#' @param traits list of traits to filter distributions by.
#' @examples
#' listDistributions()
#' listDistributions(traits = list(VariateForm = "univariate"))
#' listDistributions(traits = list(ValueSupport = "discrete"))
#' @export
listDistributions <- function(simplify=FALSE, traits=NULL){
y = sapply(ls(name="package:distr6"),function(x){
if(inherits(get(x),"R6ClassGenerator")){
if(environmentName(get(x)$get_inherit()) == "Distribution_generator")
return(get(x)$classname)
else
return(FALSE)
} else
return(FALSE)
})
y = y[y!="FALSE"]
y = y[y!="DistributionWrapper"]
if(simplify)
return(as.character(y))
else{
distrs = do.call(rbind.data.frame,lapply(y, function(x){
x = get(x)
ClassName = x$classname
x = x$new()
ShortName = x$short_name
Type =  getR6Class(x$type())
ValueSupport = x$valueSupport()
VariateForm = x$variateForm()
return(cbind(ShortName, ClassName, Type, ValueSupport, VariateForm))
}))
row.names(distrs) = NULL
if(!is.null(traits)){
names(traits) = tolower(names(traits))
if(checkmate::testList(traits)){
for(i in 1:length(traits))
distrs = distrs[distrs[,tolower(colnames(distrs)) %in% names(traits)[[i]]] == traits[[i]],]
}
}
if("ShortName" %in% rownames(data.frame(distrs))) distrs = t(distrs)
return(data.frame(distrs))
}
}
listDistributions()
y = sapply(ls(name="package:distr6"),function(x){
if(inherits(get(x),"R6ClassGenerator")){
if(environmentName(get(x)$get_inherit()) == "Distribution_generator")
return(get(x)$classname)
else
return(FALSE)
} else
return(FALSE)
})
y = y[y!="FALSE"]
y = y[y!="DistributionWrapper"]
y
devtools::document()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::check()
