updateFunc = list(NULL, "1/self$getParameterValue('rate')",
"exp(self$getParameterValue('rate'))"),
description = list("Arrival rate","Scale parameter","testpar"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
cdf = cexpo,
parameters = ps
)
test_that("check all accessors are working", {
expect_equal(continuousTester$decorators, list())
expect_equal(continuousTester$valueSupport(), "continuous")
expect_equal(continuousTester$variateForm(), "univariate")
expect_equal(continuousTester$symmetry(), "symmetric")
expect_is(continuousTester$getParameterValue("size"), "character")
})
test_that("check core statistics", {
expect_silent(continuousTester$setParameterValue(list(rate = 6)))
expect_message(decorate(continuousTester, CoreStatistics))
expect_equal(continuousTester$genExp(), 1/6)
expect_equal(continuousTester$var(), 1/36)
expect_equal(continuousTester$sd(), 1/6)
expect_equal(continuousTester$kthmoment(2), continuousTester$var())
expect_equal(continuousTester$kthmoment(3, type = "standard"), continuousTester$skewness())
expect_equal(continuousTester$kthmoment(4, type = "standard"), continuousTester$kurtosis(FALSE))
expect_message(continuousTester$setParameterValue(list(rate = 10)))
expect_equal(continuousTester$mgf(6), continuousTester$getParameterValue("rate") / (continuousTester$getParameterValue("rate") - 6))
expect_message(continuousTester$setParameterValue(list(rate = 5)))
expect_equal(continuousTester$entropy(base=exp(1)), 1-log(continuousTester$getParameterValue("rate")))
})
test_that("check exotic statistics", {
expect_message(ExoticStatistics$new(continuousTester))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(round(continuousTester$expectation(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(continuousTester$hazard(3), continuousTester$pdf(3)/continuousTester$survival(3))
expect_equal(-log(continuousTester$survival(3)), continuousTester$cumHazard(3))
})
test_that("check exotic statistics", {
expect_message(decorate(continuousTester, ExoticStatistics))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(round(continuousTester$expectation(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(continuousTester$hazard(3), continuousTester$pdf(3)/continuousTester$survival(3))
expect_equal(-log(continuousTester$survival(3)), continuousTester$cumHazard(3))
})
test_that("check exotic statistics", {
expect_message(decorate(continuousTester, ExoticStatistics))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(round(continuousTester$genExp(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(continuousTester$hazard(3), continuousTester$pdf(3)/continuousTester$survival(3))
expect_equal(-log(continuousTester$survival(3)), continuousTester$cumHazard(3))
})
source('~/GitHub/distr6/tests/testthat/test-continuousDistribution.R')
source('~/GitHub/distr6/tests/testthat/test-truncation.R')
TruncExp = TruncatedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(TruncExp$support()$numeric(), 1:5)
expect_equal(TruncExp$pdf(0), 0)
expect_equal(TruncExp$pdf(6), 0)
source('~/GitHub/distr6/tests/testthat/test-truncation.R')
Exp1 = Exponential$new(rate = 1)
Exp2 = Exponential$new(rate = 1)
ConvE12 = Convolution$new(Exp1, Exp2, support = PosReals$new())
ConvE12 = Convolution$new(Exp1, Exp2, support = PosReals$new())
devtools::document("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
Exp1 = Exponential$new(rate = 1)
Exp2 = Exponential$new(rate = 1)
ConvE12 = Convolution$new(Exp1, Exp2, support = PosReals$new())
expect_equal(ConvE12$pdf(1), dgamma(x = 1, shape = 2))
decorate(ConvE12, CoreStatistics)
expect_equal(ConvE12$pdf(1), dgamma(x = 1, shape = 2))
ConvE12$pdf(1)
ConvE12$pdf(1)
source('~/GitHub/distr6/tests/testthat/test-discreteDistribution.R')
library(testthat)
dbin = function(x, log,...){
m1 = choose(self$getParameterValue(id="size"), x)
m2 = self$getParameterValue(id="prob")^x
m3 = (1-self$getParameterValue(id="prob"))^(self$getParameterValue(id="size") - x)
return(m1 * m2 * m3)
}
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = posNaturals$new(),
distrDomain=posNaturals$new(),
pdf = dbin,
parameters = list(list(id = "prob",
name = "Probability of Success",
default = 0.5,
value = 0.2,
settable = TRUE,
fittable = TRUE,
class = "numeric",
lower = 0,
upper = 1,
description = "None"),
list(id = "size",
name = "Number of trials",
default = 10,
settable = TRUE,
fittable = TRUE,
class = "integer",
lower = 0,
upper = Inf,
description = "None")),
decorators = list(CoreStatistics),
paramvalues = list(size = 100)
)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=interval$new(0,100),
symmetric=T, type = posNaturals$new(),
distrDomain=posNaturals$new(),
pdf = dbin,
parameters = list(list(id = "prob",
name = "Probability of Success",
default = 0.5,
value = 0.2,
settable = TRUE,
fittable = TRUE,
class = "numeric",
lower = 0,
upper = 1,
description = "None"),
list(id = "size",
name = "Number of trials",
default = 10,
settable = TRUE,
fittable = TRUE,
class = "integer",
lower = 0,
upper = Inf,
description = "None")))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = list(list(id = "prob",
name = "Probability of Success",
default = 0.5,
value = 0.2,
settable = TRUE,
fittable = TRUE,
class = "numeric",
lower = 0,
upper = 1,
description = "None"),
list(id = "size",
name = "Number of trials",
default = 10,
settable = TRUE,
fittable = TRUE,
class = "integer",
lower = 0,
upper = Inf,
description = "None")))
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.5, 10, 0.5),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = posNaturals$new(),
distrDomain=posNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics),
paramvalues = list(size = 100)
)
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.5, 100, 0.5),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = posNaturals$new(),
distrDomain=posNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics)
)
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics)
)
test_that("check all accessors are working", {
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
expect_equal(discreteTester$name(), "Discrete Test")
expect_equal(discreteTester$short_name(), "TestDistr")
expect_equal(discreteTester$description(), NULL)
expect_equal(discreteTester$decorators(), "CoreStatistics")
expect_equal(discreteTester$valueSupport(), "discrete")
expect_equal(discreteTester$variateForm(), "univariate")
expect_true(discreteTester$symmetry())
expect_equal(discreteTester$getParameterValue("size"), 100)
})
discreteTester$strprint()
ps = ParameterSet$new(id = list("prob","size","qprob"), value = list(0.2, 100, 0.8),
lower = list(0, 1, 0), upper = list(1, Inf, 1),
class = list("numeric","integer","numeric"),
settable = list(TRUE, TRUE, FALSE), fittable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, NULL, "1 - self$getParameterValue('prob')"),
description = list("Probability of Success", "Number of trials",
"Probability of failure"))
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=T, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics)
)
test_that("check all accessors are working", {
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
expect_equal(discreteTester$name(), "Discrete Test")
expect_equal(discreteTester$short_name(), "TestDistr")
expect_equal(discreteTester$description(), NULL)
expect_equal(discreteTester$decorators(), "CoreStatistics")
expect_equal(discreteTester$valueSupport(), "discrete")
expect_equal(discreteTester$variateForm(), "univariate")
expect_true(discreteTester$symmetry())
expect_equal(discreteTester$getParameterValue("size"), 100)
})
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
test_that("check all accessors are working", {
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
expect_equal(discreteTester$name, "Discrete Test")
expect_equal(discreteTester$short_name, "TestDistr")
expect_equal(discreteTester$description, NULL)
expect_equal(discreteTester$decorators, "CoreStatistics")
expect_equal(discreteTester$valueSupport(), "discrete")
expect_equal(discreteTester$variateForm(), "univariate")
expect_true(discreteTester$symmetry())
expect_equal(discreteTester$getParameterValue("size"), 100)
})
discreteTester = Distribution$new("Discrete Test","TestDistr",support=Interval$new(0,100),
symmetric=TRUE, type = PosNaturals$new(),
distrDomain=PosNaturals$new(),
pdf = dbin,
parameters = ps,
decorators = list(CoreStatistics)
)
discreteTester$symmetry()
test_that("check all accessors are working", {
expect_equal(discreteTester$strprint(), "TestDistr(prob = 0.2, size = 100.0)")
expect_equal(discreteTester$name, "Discrete Test")
expect_equal(discreteTester$short_name, "TestDistr")
expect_equal(discreteTester$description, NULL)
expect_equal(discreteTester$decorators, "CoreStatistics")
expect_equal(discreteTester$valueSupport(), "discrete")
expect_equal(discreteTester$variateForm(), "univariate")
expect_equal(discreteTester$symmetry(),"symmetric")
expect_equal(discreteTester$getParameterValue("size"), 100)
})
test_that("check parameter getting/setting", {
expect_error(discreteTester$setParameterValue("sgdsvfd"))
expect_silent(discreteTester$setParameterValue(list(size = 2, prob = 0.9)))
expect_equal(discreteTester$getParameterValue("prob"), 0.9)
})
test_that("check basic maths functions as expected", {
expect_equal(discreteTester$pdf(1), dbinom(1,2,0.9))
expect_equal(discreteTester$expectation(), 2*0.9)
expect_equal(discreteTester$var(), 2*0.9*0.1)
})
test_that("check basic maths functions as expected", {
expect_equal(discreteTester$pdf(1), dbinom(1,2,0.9))
expect_equal(discreteTester$genExp(), 2*0.9)
expect_equal(discreteTester$var(), 2*0.9*0.1)
})
test_that("check kurtosis and skewness", {
expect_equal(round(discreteTester$kurtosis(), 2), 2.56)
expect_equal(discreteTester$kurtosisType(), "leptokurtic")
expect_equal(round(discreteTester$skewness(), 2), -1.89)
expect_equal(discreteTester$skewnessType(), "negative skew")
})
test_that("check exotic functions silent",{
expect_silent(discreteTester$mode())
expect_silent(discreteTester$kthmoment(2))
expect_silent(discreteTester$kthmoment(3, type = "standard"))
expect_silent(discreteTester$pgf(z=2))
expect_silent(discreteTester$entropy())
})
discreteTester$entropy()
discreteTester$entropy
discreteTester$kthmoment(2)
test_that("check exotic functions silent",{
expect_silent(discreteTester$mode())
expect_silent(discreteTester$kthmoment(2))
expect_silent(discreteTester$kthmoment(3, type = "standard"))
expect_silent(discreteTester$pgf(z=2))
expect_silent(discreteTester$entropy())
})
test_that("check mgf, cf, pgf",{
expect_equal(discreteTester$mgf(4), (1 - 0.9 + 0.9*exp(4))^2)
expect_equal(discreteTester$cf(4), (1 - 0.9 + 0.9*exp(4)*1+0i)^2)
expect_equal(discreteTester$pgf(2), (1 - 0.9 + 0.9*2)^2)
})
source('~/GitHub/distr6/tests/testthat/test-discreteDistribution.R')
Exp2 = HuberizedDistribution$new(Exp1, lower = 1, upper = 5)
test_that("check continuous Truncated wrapper", {
Exp2 = HuberizedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(Exp2$pdf(-100), Exponential$new()$cdf(1))
expect_equal(Exp2$pdf(100), 1-Exponential$new()$cdf(5))
expect_equal(Exp2$pdf(3), Exponential$new()$pdf(3))
})
Exp2 = HuberizedDistribution$new(Exponential$new(), lower = 1, upper = 5)
expect_equal(Exp2$pdf(-100), Exponential$new()$cdf(1))
Exp2$pdf(-100)
Exp2
Exp2$pdf(1)
Exp2$pdf(-10)
Exp2$pdf
Exp2$liesInSupport(-100)
Exp2$pdf(-1)
Exp2$pdf
Exp2$liesInSupport(-1, F)
devtools::document("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
Exp2 = HuberizedDistribution$new(Exponential$new(), lower = 1, upper = 5)
Exp2$pdf(-100)
expect_equal(Exp2$pdf(-100), Exponential$new()$cdf(1))
Exp2$pdf(0)
Exp2$pdf(1)
Exp2 = HuberizedDistribution$new(Exponential$new(), lower = 2, upper = 5)
expect_equal(Exp2$pdf(1), Exponential$new()$cdf(1))
Exp2$pdf(1)
Exp2$.__enclos_env__$private$.pdf
expect_equal(Exp2$pdf(1), Exponential$new()$cdf(2))
expect_equal(Exp2$pdf(2), Exponential$new()$cdf(2))
expect_equal(Exp2$pdf(100), 1-Exponential$new()$cdf(5))
expect_equal(Exp2$pdf(3), Exponential$new()$pdf(3))
test_that("check continuous Truncated wrapper", {
Exp2 = HuberizedDistribution$new(Exponential$new(), lower = 2, upper = 5)
expect_equal(Exp2$pdf(1), Exponential$new()$cdf(2))
expect_equal(Exp2$pdf(2), Exponential$new()$cdf(2))
expect_equal(Exp2$pdf(100), 1-Exponential$new()$cdf(5))
expect_equal(Exp2$pdf(3), Exponential$new()$pdf(3))
})
source('~/GitHub/distr6/tests/testthat/test-huberization.R')
source('~/GitHub/distr6/tests/testthat/test-huberization.R')
source('~/GitHub/distr6/tests/testthat/test-huberization.R')
source('~/GitHub/distr6/tests/testthat/test-huberization.R')
library(testthat)
context("Huberization")
test_that("check continuous Truncated wrapper", {
hubExp = HuberizedDistribution$new(Exponential$new(), lower = 2, upper = 5)
expect_equal(hubExp$pdf(1), Exponential$new()$cdf(2))
expect_equal(hubExp$pdf(2), Exponential$new()$cdf(2))
expect_equal(hubExp$pdf(100), 1-Exponential$new()$cdf(5))
expect_equal(hubExp$pdf(3), Exponential$new()$pdf(3))
})
test_that("check discrete Truncated wrapper", {
hubBin = HuberizedDistribution$new(Binomial$new(), lower = 2, upper = 5)
expect_equal(hubBin$pdf(1), Binomial$new()$cdf(2))
expect_equal(hubBin$pdf(2), Binomial$new()$cdf(2))
expect_equal(hubBin$pdf(9), 1-Binomial$new()$cdf(5))
expect_equal(hubBin$pdf(3), Binomial$new()$pdf(3))
})
source('~/GitHub/distr6/tests/testthat/test-discreteDistribution.R')
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
library(testthat)
context("Mixture")
test_that("check continuous Mixture wrapper", {
mixExp = MixtureDistribution$new(list(Exponential$new(),Exponential$new()))
expect_equal(mixExp$pdf(1:10), Exponential$new()$pdf(1:10))
expect_equal(mixExp$cdf(1:10), Exponential$new()$cdf(1:10))
})
test_that("check discrete mixture wrapper", {
mixBin = MixtureDistribution$new(list(Binomial$new(),Binomial$new()))
expect_equal(mixBin$pdf(1:10), Binomial$new()$pdf(1:10))
expect_equal(mixBin$cdf(1:10), Binomial$new()$cdf(1:10))
})
source('~/GitHub/distr6/tests/testthat/test-mixture.R')
scaleExp = Scale$new(Exponential$new())
expect_message(decorate(scaleExp, CoreStatistics))
expect_equal(round(scaleExp$expectation(), 5), 0)
expect_equal(round(scaleExp$genExp(), 5), 0)
scaleExp$genExp()
scaleExp$parameters()
scaleExp$genExp()
scaleExp$genExp
scaleExp$pdf
scaleExp$.__enclos_env__$private$.pdf
devtools::document("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
library(testthat)
library(distr6)
test_package("distr6")
covr::package_coverage(type = "tests")
??tools::package.dependencies
tools::package.dependencies("distr6")
tools::package_dependencies("distr6")
tools::package_dependencies(distr6)
available.packages()
min_r_version <- function(package="ggplot2", exclude_main_pkg=TRUE) {
min_r_version <- function(package="ggplot2", exclude_main_pkg=TRUE) {
min_r_version <- function(package="ggplot2", exclude_main_pkg=TRUE){
purrr::walk(c("tools", "purrr", "devtools", "stringi", "tidyr", "dplyr"),
require, character.only=TRUE)
deps <- package_dependencies(package, recursive=TRUE)
if (exclude_main_pkg) {
pkgs <- deps[[1]]
} else {
pkgs <- c(package, deps[[1]])
}
available.packages() %>%
as_data_frame() %>%
filter(Package %in% pkgs) %>%
select(Depends)  %>%
unlist() -> pkg_list
# if main pkg only relied on core R packages (i.e. pkgs that aren't in CRAN) and we
# excluded the pkg itself from the min version calculation, this is an edge case we need
# to handle.
if (length(pkg_list) == 0) return("Unspecified")
stri_split_regex(pkg_list, "[,]") %>%
unlist() %>%
trimws() %>%
stri_match_all_regex(c("^R$|^R \\(.*\\)$")) %>%
unlist() %>%
discard(is.na(.)) %>%
unique() %>%
stri_replace_all_regex("[R >=\\(\\)]", "") %>%
data_frame(vs=.) %>%
separate(vs, c("a", "b", "c"), fill="right") %>%
mutate(c=ifelse(is.na(c), 0, c)) %>%
arrange(a, b, c) %>%
tail(1) %>%
unite(min, a:c, sep=".") -> vs
return(vs$min)
}
min_r_version()
min_r_version("distr6")
min_r_version("distr6", F)
?devtools::install_github
Binomial$new(decorators = CoreStatistics)
x=Binomial$new(decorators = CoreStatistics)
x$kthmoment(4)
x$kthmoment(3)
x$kthmoment(2)
x$kthmoment(1)
x$kthmoment
x$kthmoment(1)
x$kthmoment(0)
x$kthmoment(2)
x$var()
x$kthmoment(3, type = "central")
x$kthmoment(3, type = "standard")
x$skewness()
x$kthmoment(4, type = "standard")
x$kurtosis()
x$kthmoment(4, type = "standard")-3
R62S3::R62S3(Distribution,parent.env(environment()),parent.env(environment()))
y = sapply(ls(name=".GlobalEnv"),function(x){
if(inherits(get(x),"R6ClassGenerator")){
if(environmentName(get(x)$get_inherit()) == "Distribution_generator")
return(get(x)$classname)
else
return(FALSE)
} else
return(FALSE)
})
y = (y[y!="FALSE"])
y
ls(name="distr6")
ls("distr6")
ls("package:distr6")
inf(Binomial$new())
as.environment("package:distr6")
as.environment("f")
source('~/GitHub/distr6/R/decorate.R')
x  = Binomial$new()
decorate(x, "CoreStatistics")
R62S3::R62S3
decorate(x, "CoreStatistics")
decorate(x, CoreStatistics)
class(x)
CoreStatistics
class(CoreStatistics)
R62S3::R62S3(CoreStatistics)
R62S3::R62S3(CoreStatistics,as.environment("package:distr6"),as.environment("package:distr6"))
cor.CoreStatistics
source('~/GitHub/R62S3/R/R62S3.R')
source('~/GitHub/distr6/R/decorate.R')
x = Binomial$new()
decorate(x,CoreStatistics)
as.environment("package:distr6")
source('~/GitHub/distr6/R/decorate.R')
decorate(x,CoreStatistics)
x = Binomial$new()
decorate(x,CoreStatistics)
R6Class = CoreStatistics
binomial$new()
class(Binomial$new())
class(Binomial)
x
getR6Class(x)
get(getR6Class(x))
class(get(getR6Class(x)))
source('~/GitHub/R62S3/R/R62S3.R')
x = Binomial$new()
source('~/GitHub/distr6/R/decorate.R')
decorate(x, CoreStatistics, T)
kthmoment(x)
kthmoment(x,4)
