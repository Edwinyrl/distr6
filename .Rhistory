distr6::checkSkewness
distr6::cf
methods(cf)
?pgf
methods(pgf)
methods("ogf")
methods("pgf")
remotes::install_github("RaphaelS1/distr6","dev", force = T)
library(distr6)
library(magrittr)
installed.packages("unknown")
RSmisc::ifnerror
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname = "pdf"
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
source('~/GitHub/distr6/R/DistributionDecorator_CoreStatistics.R')
get("skewness")
obj = CoreStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 3
methodname = names(methods)[[i]]
methodname
methodname = RSmisc::ifnerror(get(methodname), paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname
methodname = names(methods)[[i]]
methodname
get(methodname)
remotes::install_github("raphaels1/rsmisc","dev")
remotes::install_github("raphaels1/rsmisc")
library(R62S3)
setwd("~/GitHub/distr6")
devtools::load_all()
B <- Binomial$new()
B$name
B$short_name
B$description
D <- Distribution$new("t",pdf=dbinom)
D$name
D$short_name
devtools::document()
?Binomial
devtools::document()
?Binomial
devtools::document()
?Binomial
devtools::document()
?Binomial
devtools::document()
?Exponential
devtools::document()
?Exponential
B$decorators()
D$decorators()
B$traits
D$traits
D$valueSupport()
B$valueSupport()
D$variateForm()
B$variateForm()
D$type()
B$type()
D$properties()
B$properties()
D$support()
B$sup()
B$support()
D$distrDomain()
B$distrDomain()
B$symmetry()
D$symmetry()
B$parameters()
B$parameters("prob")
B$getParameterValue("prob")
B$sup()
D$inf()
B$parameters()
B$parameters("prob")
B$parameters(c("prob","size"))
devtools::load_all()
B <- Binomial$new()
B$parameters()
B$parameters("prob")
B$parameters(c("prob","qprob"))
inf(B)
sup(B)
devtools::load_all(export_all = F)
inf(B)
?strprint
devtools::load_all(export_all = T)
?print.dendrogram
devtools::document()
devtools::load_all(export_all = T)
?print.Distribution
devtools::load_all(export_all = T)
devtools::document()
devtools::load_all(export_all = F)
?print.Distribution
print(D)
Binomial$new()
print.Distribution(Binomial$new())
print.Distribution
?print.Distribution
methods(print)
devtools::document()
devtools::load_all(export_all = F)
?Distribution
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(export_all = F)
?Distribution
?decorators
D$properties()
D$traits
?SymbolicSet
Set$new
?Set
?SetInterval
devtools::document()
devtools::load_all(export_all = F)
?support
devtools::document()
devtools::load_all(export_all = F)
?support
devtools::document()
devtools::load_all(export_all = F)
?support
D$properties()
D$parameters()
D$parameters
D$.__enclos_env__$private$.parameters
summary(D
)
B$parameters("d")
B$parameters("y")
B$getParameterValue("d")
devtools::document()
devtools::load_all(export_all = F)
?decorators
devtools::document()
devtools::load_all(export_all = F)
?decorators
devtools::document()
devtools::load_all(export_all = F)
devtools::document()
?decorators
devtools::document()
devtools::check()
getParameterValue
setParameterValue
R6Class = ParameterSet
checkmate::assert(inherits(R6Class,"R6ClassGenerator"),
.var.name = "R6Class must be an R6ClassGenerator")
obj = R6Class
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
detectGeneric = TRUE, mask = FALSE
detectGeneric = TRUE
mask = FALSE
mask
methods
names(methods)
i = 4
methodname = names(methods)[[i]]
assignname = methodname
methodname
assignname
detectGeneric
generic = FALSE
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
class(x)!="try-error"
length(x) > 0
generic
mask
assignname = RSmisc::ifnerror(get(methodname),
lapply(dispatchClasses, function(x) paste(names(methods)[[i]],x$classname,sep=".")),
methodname)
dispatchClasses = list(R6Clas)
dispatchClasses = list(R6Class)
assignname = lapply(dispatchClasses, function(x) paste(names(methods)[[i]],x$classname,sep="."))
assignname
assignname = RSmisc::ifnerror(get(methodname),
lapply(dispatchClasses, function(x) paste(names(methods)[[i]],x$classname,sep=".")),
methodname)
assignname
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all(export_all = T)
getParameterValue
R62Fun
R6Class = ParameterSet
mask = FALSE
detectGeneric = TRUE
assignEnvir = parent.env(environment())
dispatchClasses = list(R6Class)
checkmate::assert(inherits(R6Class,"R6ClassGenerator"),
.var.name = "R6Class must be an R6ClassGenerator")
obj = R6Class
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
detectGeneric
mask
names(methods)
i = 4
methodname = names(methods)[[i]]
assignname = methodname
assignname
detectGeneric
generic = FALSE
mask
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
generic
mask
assignname = RSmisc::ifnerror(get(methodname),
lapply(dispatchClasses, function(x) paste(names(methods)[[i]],x$classname,sep=".")),
methodname)
assignname
dispatchClasses
j = 1
value = function(object){}
formals(value) = c(formals(value), formals(methods[[j]]))
body(value) = substitute({
args = as.list(match.call())
args[[j]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
methods[[j]]
methods[[i]]
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args[[j]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args[[i]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
args = as.list(match.call())
args
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
#args[[1]] = NULL
print(args)
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
value()
value = function(object){}
formals(value) = c(formals(value), formals(methods[[i]]))
body(value) = substitute({
args = as.list(match.call())
args[[1]] = NULL
args$object = NULL
do.call(object[[method]], args)
},list(method=methodname[[j]]))
value
assign(assignname[[j]], value, envir = assignEnvir)
assignname
j
assignEnvir
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
getParameterValue
setwd("~/GitHub/R62S3")
devtools::check()
remotes::install_github("raphaels1/r62s3")
setwd("~/GitHub/distr6")
devtools::document()
devtools::check()
?decorators
devtools::document()
devtools::check()
?decorators
?symmetry
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?Distribution
liesInSupport(Binomial$new(),5)
liesInSupport(Binomial$new(),1:10)
liesInSupport(Binomial$new(),1:10,all=F)
liesInSupport(Binomial$new(),1:12,all=F)
liesInSupport(Binomial$new(),1:12,all=T)
devtools::document()
?Distribution
devtools::document()
?Distribution
devtools::document()
?Distribution
devtools::document()
?Distribution
devtools::document()
?Distribution
methods(qqplot)
strprint.Distribution
?strprint.Distribution
devtools::document()
?Distribution
devtools::document()
?Distribution
devtools::document()
devtools::load_all(export_all = F)
Distribution
Distribution$new()
Distribution$new
?Distribution
devtools::load_all(export_all = F)
devtools::document()
devtools::load_all(export_all = F)
devtools::document()
?pdf
devtools::document()
?pdf
devtools::document()
?pf
?pdf
?dnorm
devtools::document()
?cdf
devtools::document()
?cdf
?Distributions
?Distribution
?qnorm
qnorm
log(0.2)
qnorm(0.3,log.p=T)
qnorm(0,log.p=T)
qnorm(1,log.p=T)
qnorm(0.9,log.p=T)
devtools::document()
devtools::document()
?quantile
devtools::document()
?quantile
?qnorm
?pdf
?cdf
?quantile
devtools::document()
?quantile
?rand
Distribution$new("t",pdf=dbinom)$var()
Distribution$new("t",pdf=dbinom)$sd()
Distribution$new("d",pdf=dbinom) %>% kurtosisType()
Distribution$new("d",pdf=dbinom) %>% kurtosis()
kurtosis(Distribution$new("d",pdf=dbinom))
devtools::check()
pdf(Binomial$new())
quantile
?quantile
quantile(Binomial$new())
quantile(Binomial$new(),0.1)
median(Binomial$new(),0.1)
median(Binomial$new())
devtools::document()
devtools::check()
devtools::check()
?median
?median.Distribution
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
?quantile
?median
devtools::document()
?quantile.Distribution
devtools::document()
?quantile.Distribution
devtools::load_all()
devtools::check()
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
?quantile
quantile.Distribution
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
quantile.Distribution
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
value = function(){}
formals(value) = c(arg1, formals(value), formals(methods[[i]]))
arg1= formals(get("quantile"))[[1]]
arg1
formals(get("quantile"))[[1]]
get("quantile")
formals(get("quantile"))
formals(get("quantile"))[[1]]
formals(get("quantile"))[1]
arg1=formals(get("quantile"))[1]
formals(value) = c(arg1, formals(value), formals(methods[[i]]))
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
?quantile.Distribution
quantile
quantile.Distribution
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
arg1 = formals(get(quantile))[1]
arg1 = formals(get("quantile"))[1]
arg1
names(arg1)
names(arg1)[[1]]
alist
alist(names(arg1)[[1]]=)
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
?quantile.Distribution
quantile.Distribution
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
?quantile.Distribution
quantile.Distribution
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
alist("object") =
alist("object"=)
alist("x"=)
arg1
arg1 <- names(arg1)[[1]]
arg1
alist(arg1=)
?alist
alist()=1
xalist()
x=alist()
x
x[[1]]
c(x,arg1)
alist(arg1)
alist(arg1=)
list()
names(list())=arg1
x = list(NULL)
names(x) = arg1
x
value = function(){}
formals(value) = c(x, formals(methods[[i]]))
methods = quantile
formals(value) = c(x, formals(methods[[i]]))
i=1
formals(value) = c(x, formals(methods[[i]]))
methods = list(quantile)
formals(value) = c(x, formals(methods[[i]]))
value
x = alist(x=)
x
names(x) = arg1
x
arg1 <- "object"
names(x) = arg1
x
source('~/GitHub/R62S3/R/R62Fun.R')
source('~/GitHub/R62S3/R/R62Fun.R')
devtools::load_all()
?quantile
quantile.Distribution()
?quantile.Distribution
quantile.Distribution
devtools::document()
devtools::check()
devtools::install_github("raphaels1/r62s3","dev")
devtools::check()
devtools::document()
quantile.Distribution
