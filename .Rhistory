methods
length(methods)
i  = 6
methodname = names(methods)[[i]]
methodname
getter = get0(methodname, envir = getEnvir)
getEnvir = "package:distr6"
getter = get0(methodname, envir = getEnvir)
getEnvir = as.environment("package:distr6")
getter = get0(methodname, envir = getEnvir)
getter
getEnvir
getter
x = FALSE
generic = FALSE
!is.null(getter)
x = suppressWarnings(suppressMessages((try(methods(getter),silent=T))))
x
methods(getter)
getter
name(getters)
getter
methodname
methods(methodname)
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
class(x)!="try-error"
x = suppressWarnings(suppressMessages(methods(methodname)))
x
length(x) > 0
methods("rbind")
methods("rbindas")
methodname
generic = FALSE
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
class(x)!="try-error"
length(x) > 0
generic = TRUE
!generic
y = "Distribution"
method = paste(methodname,y$classname,sep=".")
y = Distribution
method = paste(methodname,y$classname,sep=".")
method
value = function(x, ...){}
value
body(value) = substitute({
args = list(...)
do.call(x[[method]], args)
},list(method=methodname))
value
paste0(method)
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
rbind(data.frame(a),data.frame(b))
rbind(data.frame(1),data.frame(2))
rbind(data.frame(a=1),data.frame(a=2))
median(Binomial$new())
median(Binomial$new())
source('~/GitHub/R62S3/R/R62S3.R')
printMachine <- R6::R6Class("printMachine",
public = list(initialize = function() {},
printer = function(str) {print(str)}))
pm <- printMachine$new()
R62S3(printMachine)
pm$printer("Test String A")
printer(pm, "Test String B"
)
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
methods(lbind)
methods("lbind")
methods("rbind")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
nogen <- R6::R6Class("nogen",public = list(lbind = function() return("Test No Gen")))
test_that("no generic",{
expect_silent(R62S3(nogen))
expect_equal(lbind(nogen), "Test No Gen")
})
expect_silent(R62S3(nogen))
expect_equal(lbind(nogen$new()), "Test No Gen")
expect_silent(get("lbind"))
expect_silent(get("lbind.nogen"))
expect_silent(R62S3(gen))
gen <- R6::R6Class("gen",public = list(rbind = function() return("Test Gen")))
expect_silent(R62S3(gen))
expect_equal(rbind(gen$new()), "Test Gen")
expect_silent(get("rbind.gen"))
expect_silent(get("rbind"))
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::build_wi
?devtools::build_win
check_win_devel("distr6")
devtools::check_win_devel("R62S3")
devtools::check_win_devel(R62S3)
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::revdep("/users/raphael/github/r62s3")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
ls(name=parent.env(environment()))
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
R62S3::R62S3
R62S3::R62S3
devtools::load_all("/users/raphael/github/distr6")
SpecialSet
SpecialSet$new()
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
dimension.setInterval
dimension
SetInterval$new()
SetInterval$new(1)
SetInterval$new(1,2)
SetInterval$new(1,2,3)
SetInterval$new(1,2,3,4)
SetInterval$new(1,2,3,4,2)
dimension(SetInterval$new(1,2,3,4,2))
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
as.environment("package:distr6")
source('~/GitHub/distr6/R/zzz.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/distr6/R/zzz.R')
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
R62S3(SetInterval)
R62S3(SetInterval, getEnvir = "package:distr6")
R62S3(SetInterval, getEnvir = "package:distr6", assignEnvir = "package:distr6")
source('~/GitHub/R62S3/R/R62S3.R')
R62S3(SetInterval, assignEnvir = "package:distr6")
R62S3(SetInterval, assignEnvir = as.environment("package:distr6"))
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
source('~/GitHub/R62S3/R/R62S3.R')
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::load_all("/users/raphael/github/distr6")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::document("/users/raphael/github/R62S3")
devtools::load_all("/users/raphael/github/R62S3")
devtools::check("/users/raphael/github/R62S3")
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::check_win_oldrelease("/users/raphael/github/r62s3")
devtools::check_win_oldrelease("/users/raphael/github/r62s3")
devtools::check_win_release("/users/raphael/github/r62s3")
devtools::check_win_devel("/users/raphael/github/r62s3")
devtools::release("/users/raphael/github/r62s3")
install.packages(c("cluster", "nlme"))
devtools::release("/users/raphael/github/r62s3")
install.packages("devtools")
devtools::release("/users/raphael/github/r62s3")
install.packages("maps")
install.packages("ggplot2")
library(maps)
library(ggplot2)
mp <- NULL
mapWorld <- borders("world", colour="gray50", fill="gray50") # create a layer of borders
mp <- ggplot() +   mapWorld
#Now Layer the cities on top
mp <- mp+ geom_point(aes(x=visit.x, y=visit.y) ,color="blue", size=3)
mp
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
install.packages("ggmap")
library(ggmap)
visited <- c("SFO", "Chennai", "London", "Melbourne", "Johannesbury, SA")
ll.visited <- geocode(visited)
visit.x <- ll.visited$lon
visit.y <- ll.visited$lat
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','Lithuania','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
WorldData <- map_data('world')
df <-data.frame(region=c('Hungary','France','Argentina'),value=c(4,10,11))
Total <- merge(WorldData,df,by='region')
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group,fill=Total$value),colour="white") +
scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar")
P1 <- p + theme_bw()  + labs(fill = "legend" ,title = "Title", x="", y="")
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
install.packages("mapproj")
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
library(ggplot2)
library(dplyr)
WorldData <- map_data('world') %>% filter(region != "Antarctica") %>% fortify
df <- data.frame(region=c('Hungary','Lithuania','Argentina'),
value=c(4,10,11),
stringsAsFactors=FALSE)
p <- ggplot() +
geom_map(data = WorldData, map = WorldData,
aes(x = long, y = lat, group = group, map_id=region),
fill = "white", colour = "#7f7f7f", size=0.5) +
geom_map(data = df, map=WorldData,
aes(fill=value, map_id=region),
colour="#7f7f7f", size=0.5) +
coord_map("rectangular", lat0=0, xlim=c(-180,180), ylim=c(-60, 90)) +
scale_fill_continuous(low="thistle2", high="darkred", guide="colorbar") +
scale_y_continuous(breaks=c()) +
scale_x_continuous(breaks=c()) +
labs(fill="legend", title="Title", x="", y="") +
theme_bw()
p
country <- c(
Ireland,
Sweden,
United Kingdom,
France,
Luxembourg,
Israel,
Netherlands,
Denmark,
Norway,
Germany,
Spain,
Switzerland,
Italy,
Ukraine,
Austria,
Russia,
Belgium,
Monaco,
Turkey,
Azerbaijan,
Greece,
Estonia,
Latvia,
Serbia,
Yugoslavia,
Finland,
Portugal,
Iceland,
Malta,
Bulgaria,
Cyprus,
Australia,
Poland,
Serbia and Montenegro,
Romania,
Bosnia and Herzegovina,
Moldova,
Croatia,
Hungary,
Armenia,
Albania,
Lithuania,
Belarus,
Czech Republic,
Slovenia,
Georgia,
Macedonia,
Montenegro,
Slovakia,
Morocco,
San Marino,
Andorra
)
install.packages("R62S3")
citation("R62S3")
install.packages("badgecreatr")
library(badgecreatr)
?badgecreatr
cite("R62S3")
citation("R62S3")
setwd("~/GitHub/distr6")
devtools::document()
devtools::document()
devtools::load_all()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(testthat)
context("Function Imputation")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
ps = ParameterSet$new(id = list("rate", "scale"), value = list(1, 1),
lower = list(0, 0), upper = list(Inf, Inf),
class = list("numeric","numeric"),
settable = list(TRUE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')"),
description = list("Arrival rate","Scale parameter"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
parameters = ps,
R62S3 = FALSE
)
test_that("r/d/p/q null",{
expect_silent(continuousTester$pdf(1))
expect_null(continuousTester$cdf(1))
expect_null(continuousTester$quantile(1))
expect_null(continuousTester$rand(1))
})
test_that("r/d/p/q not null",{
decorate(continuousTester, FunctionImputation, R62S3 = F)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_message(continuousTester$quantile(1))
expect_message(continuousTester$rand(1))
})
decorate(continuousTester, FunctionImputation, R62S3 = F)
expect_silent(continuousTester$pdf(1))
expect_message(continuousTester$cdf(1))
expect_message(continuousTester$quantile(1))
expect_message(continuousTester$rand(1))
devtools::check()
library(testthat)
context("Custom continuous distributions")
dexpo = function(x){
m1 = self$getParameterValue("rate")
m2 = exp(-1 * self$getParameterValue("rate") * x)
return(m1 * m2)
}
cexpo = function(x){
m1 = exp(-1 * self$getParameterValue("rate") * x)
return(1 - m1)
}
ps = ParameterSet$new(id = list("rate", "scale","test"), value = list(1, 1, 0),
lower = list(0, 0, 0), upper = list(Inf, Inf, 5),
class = list("numeric","numeric","numeric"),
settable = list(TRUE, FALSE, FALSE),
updateFunc = list(NULL, "1/self$getParameterValue('rate')",
"exp(self$getParameterValue('rate'))"),
description = list("Arrival rate","Scale parameter","testpar"))
continuousTester = Distribution$new("Continuous Test","ContTest",support=PosReals$new(),
symmetric=TRUE, type = PosReals$new(zero=T),
distrDomain=PosReals$new(),
pdf = dexpo,
cdf = cexpo,
parameters = ps
)
test_that("check all accessors are working", {
expect_equal(continuousTester$decorators, list())
expect_equal(continuousTester$valueSupport(), "continuous")
expect_equal(continuousTester$variateForm(), "univariate")
expect_equal(continuousTester$symmetry(), "symmetric")
expect_warning(continuousTester$getParameterValue("size"))
})
test_that("check core statistics", {
expect_silent(continuousTester$setParameterValue(list(rate = 6)))
expect_message(decorate(continuousTester, CoreStatistics, FALSE))
expect_equal(continuousTester$genExp(), 1/6)
expect_equal(continuousTester$var(), 1/36)
expect_equal(continuousTester$sd(), 1/6)
expect_silent(continuousTester$iqr())
expect_equal(continuousTester$kthmoment(0), 1)
expect_equal(continuousTester$kthmoment(1), 0)
expect_equal(continuousTester$cov(),continuousTester$var())
expect_equal(continuousTester$kthmoment(2), continuousTester$var())
expect_equal(continuousTester$kthmoment(3, type = "standard"), continuousTester$skewness())
expect_equal(continuousTester$kthmoment(4, type = "standard"), continuousTester$kurtosis(FALSE))
expect_message(continuousTester$setParameterValue(list(rate = 10)))
expect_equal(continuousTester$mgf(6), continuousTester$getParameterValue("rate") / (continuousTester$getParameterValue("rate") - 6))
expect_message(continuousTester$setParameterValue(list(rate = 5)))
expect_equal(continuousTester$entropy(base=exp(1)), 1-log(continuousTester$getParameterValue("rate")))
})
test_that("check exotic statistics", {
expect_message(decorate(continuousTester, ExoticStatistics, FALSE))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(round(continuousTester$genExp(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(continuousTester$hazard(3), continuousTester$pdf(3)/continuousTester$survival(3))
expect_equal(-log(continuousTester$survival(3)), continuousTester$cumHazard(3))
})
expect_message(decorate(continuousTester, ExoticStatistics, FALSE))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
expect_equal(continuousTester$survival(1), 1-continuousTester$cdf(1))
expect_equal(round(continuousTester$survivalAntiDeriv(), 5), round(continuousTester$survivalPNorm(p = 1), 5))
devtools::check()
generalPNorm(Binomial$new()$pdf,2,0,10)
generalPNorm(Exponential$new()$pdf,2,0,10)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
