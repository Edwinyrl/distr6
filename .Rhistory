Switzerland,
Italy,
Ukraine,
Austria,
Russia,
Belgium,
Monaco,
Turkey,
Azerbaijan,
Greece,
Estonia,
Latvia,
Serbia,
Yugoslavia,
Finland,
Portugal,
Iceland,
Malta,
Bulgaria,
Cyprus,
Australia,
Poland,
Serbia and Montenegro,
Romania,
Bosnia and Herzegovina,
Moldova,
Croatia,
Hungary,
Armenia,
Albania,
Lithuania,
Belarus,
Czech Republic,
Slovenia,
Georgia,
Macedonia,
Montenegro,
Slovakia,
Morocco,
San Marino,
Andorra
)
install.packages("R62S3")
citation("R62S3")
install.packages("badgecreatr")
library(badgecreatr)
?badgecreatr
cite("R62S3")
citation("R62S3")
remotes::install_github("RaphaelS1/distr6")
library(distr6)
?remotes
?remotes::install_github
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(distr6)
as.environment("package:distr6")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6")
library(distr6)
listDistributions()
listWrappers()
listDecorators()
library(distr6)
listDistributions()
listWrappers(simplify = TRUE)
listDecorators(simplify = TRUE)
library(distr6)
listDistributions()
listWrappers(simplify = TRUE)
listDecorators(simplify = TRUE)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
pdf.Distribution(B, 1:10)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
#pdf.Distribution(B, 1:10)
cdf(B, 1:10)
remotes::install_github("RaphaelS1/distr6", ref = "dev")
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
pdf.Distribution(B, 1:10)
library(distr6)
dbinom(1:10, size = 10, prob = 0.5)
pbinom(1:10, size = 10, prob = 0.5)
qbinom(seq.int(0,1,length.out=10),size = 10, prob = 0.5)
B <- Binomial$new(size = 10, prob = 0.5)
# Option 1
B$pdf(1:10)
B$cdf(1:10)
B$quantile(seq.int(0,1,length.out=10))
# Option 2
#pdf.Distribution(B, 1:10)
cdf(B, 1:10)
library(distr6)
library(distr6)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.75)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial(prob = 0.5, size = 10) %>% truncate(3, 7)
library(magrittr)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial(prob = 0.5, size = 10) %>% truncate(3, 7)
#
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10))
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4))
E$setParameterValue(rate = 0.25)
E$setParameterValue(list(rate = 0.25))
E$parameters()
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = dchisq, cdf = pchisq)
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5)
support = Interval$new(1:6))
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
support = Interval$new(1:6))
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
support = Interval$new(1, 6))
D
D$pdf(1)
D$pdf(0)
D$pdf(1)
D$pdf(6)
D$pdf(7)
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(D$pdf(1:5))
plot(D$pdf(0:7))
plot(D$pdf(0:7), type = "l")
plot(D$pdf(0:7), type = "p")
plot(D$cdf(0:7), type = "l")
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
Normal$new(decorators = ExoticStatistics)
N <- Normal$new() %>% decorate(ExoticStatistics)
assign("a",1,pos = as.environment("package:distr6"))
assign("a",1,envir = as.environment("package:distr6"))
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
Normal$new()
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
decorate(Normal$new(), ExoticStatistics, R62S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- decorate(Normal$new(), ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
decorate(N, ExoticStatistics, R62S3 = FALSE)
N
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new() %>% decorate(ExoticStatistics, R62S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R622S3 = FALSE)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = FALSE)
?ExoticStatistics
N$pdfPNorm(p = 4, lower = 4, upper = 9)
?MixtureDistribution
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = list(0.1, 0.9))
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = c(0.1, 0.9))
M
plot(M$cdf(-10:10))
plot(M$cdf(-10:10), type = "l")
plot(M$cdf(-10:10), type = "p")
plot(M$cdf(-10:100), type = "p")
plot(M$cdf(-10:10), type = "p")
plot(x = -10:10, y = M$cdf(-10:10), type = "p")
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(magrittr)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4)) # Fails because of parameterisation
E$setParameterValue(list(rate = 0.25))
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
decorate
remotes::install_github("RaphaelS1/distr6","dev")
remotes::install_github("RaphaelS1/distr6","dev",force = T)
decorate
library(distr6)
decorate
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
N <- Normal$new()
decorate(N, ExoticStatistics)
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new(decorators = ExoticStatistics, R62S3 = TRUE)
N$pdfPNorm(p = 4, lower = 4, upper = 9)
remotes::install_github("RaphaelS1/distr6","dev")
?pgf
library(distr6)
?pgf
pgf(Binomial$new(),1)
B=Binomial$new(decorators = CoreStatistics)
pgf(Binomial$new(),1)
pgf(Binomial$new(),1)
pgf.Distribution(Binomial$new(),1)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(distr6)
library(distr6)
View(testSkewness)
?checkSkewness
?checkSkewness
checkSkewness(Binomial$new())
testSkewness(Binomial$new())
remotes::install_github("raphaels1/distr6","dev")
library(distr6)
remotes::install_github("RaphaelS1/distr6","dev")
library(distr6)
library(magrittr)
# 1. Find the number 1.96 from the Normal distribution
Normal$new()$quantile(0.975)
# 2. Plot the pmf of a Truncated Binomial distribution between 3 and 7 -
#   Note: Think about the original size of the distribution
TB <- Binomial$new(prob = 0.5, size = 10) %>% truncate(3, 7)
plot(TB$pdf(1:10), type = "l")
# 3. Sample from a Normal distribution with precision 5, mean 42
Normal$new(prec = 5, mean = 42)$rand(10)
# 4. Construct an Exponential distribution with rate 2, update the parameters to get scale = 4
E <- Exponential$new(rate = 2)
E$setParameterValue(list(scale = 4)) # Fails because of parameterisation
E$setParameterValue(list(rate = 0.25))
E$getParameterValue("scale")
# 7. Create your own custom distribution using the Distribution function
D <- Distribution$new("MyDist", pdf = function(x1) return(1/5),
cdf = function(x1) return((x1 - 1)/5),
support = Interval$new(1, 6))
plot(x = 0:7, y = D$pdf(0:7), type = "p")
plot(x = 0:7, y = D$cdf(0:7), type = "l")
# 8. Find the 4-norm of the Normal Distribution between 4 and 9 (find the decorator!)
N <- Normal$new()
pdfPNorm(N, 4, 4, 9) # Fails as not decorated
N %>% decorate(ExoticStatistics)
N$pdfPNorm(p = 4, lower = 4, upper = 9)
# 9. Plot the cdf of the Mixture_Norm_Binom with weights (0.1, 0.9) distribution.
M <- MixtureDistribution$new(distlist = list(Normal$new(), Binomial$new()),
weights = c(0.1, 0.9))
plot(x = -10:10, y = M$cdf(-10:10), type = "p")
pdfPNorm(p = 4, lower = 4, upper = 9)
cf(N)
cf
force(Naturals)
distr6::cf
View(cf)
cf.Distribution
cf
methods(cf)
methods("cf")
methods("cf")
distr6::testSkewness
?distr6::testSkewness
?checkSkewness
distr6::checkSkewness
distr6::cf
methods(cf)
?pgf
methods(pgf)
methods("ogf")
methods("pgf")
remotes::install_github("RaphaelS1/distr6","dev", force = T)
library(distr6)
library(magrittr)
installed.packages("unknown")
RSmisc::ifnerror
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname = "pdf"
methodname = RSmisc::ifnerror(get(methodname),
paste(names(methods)[[i]],R6Class$classname,sep="."))
source('~/GitHub/distr6/R/DistributionDecorator_CoreStatistics.R')
get("skewness")
obj = CoreStatistics
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
i = 3
methodname = names(methods)[[i]]
methodname
methodname = RSmisc::ifnerror(get(methodname), paste(names(methods)[[i]],R6Class$classname,sep="."))
methodname
methodname
methodname = names(methods)[[i]]
methodname
get(methodname)
remotes::install_github("raphaels1/rsmisc","dev")
remotes::install_github("raphaels1/rsmisc")
setwd("~/GitHub/R62S3")
devtools::check()
setwd("~/GitHub/distr6")
devtools::load_all()
quantile.Distribution
?quantile.Distribution
devtools::document()
?quantile.Distribution
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
?median
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
?median.Distribution
devtools::document()
devtools::check()
devtools::document()
devtools::check()
setwd("~/GitHub/R62S3")
devtools::load_all()
nogen <- R6::R6Class("nogen",public = list(printer = function() return("Test No Gen")))
test_that("no generic",{
expect_silent(R62S3(nogen, assignEnvir = .GlobalEnv))
expect_equal(printer(nogen$new()), "Test No Gen")
expect_silent(get("printer"))
expect_silent(get("printer.nogen"))
})
nogen <- R6::R6Class("nogen",public = list(printer = function(y) print(y)))
test_that("no generic",{
expect_silent(R62S4(nogen, assignEnvir = .GlobalEnv))
expect_true(isGeneric("printer"))
expect_true(any(grepl("nogen",methods("printer"))))
expect_equal(printer(nogen$new(),"Test No Gen"), "Test No Gen")
})
R6Class = nogen
obj = R6Class
methods = obj$public_methods[!(names(obj$public_methods) %in% c("initialize","clone"))]
methods
1
i=1
methodname = names(methods)[[i]]
generic = FALSE
mask=F
x = suppressWarnings(suppressMessages((try(methods(methodname),silent=T))))
x
def = function(object, ...){}
methods::setGeneric(methodname, def = def, where = assignEnvir)
assignEnvir = .GlobalEnv
methods::setGeneric(methodname, def = def, where = assignEnvir)
lapply(dispatchClasses, function(x) methods::setOldClass(x$classname, where = assignEnvir))
arg1 = formals(get(methodname))[1]
dispatchClasses =list(R6Class)
lapply(dispatchClasses, function(x) methods::setOldClass(x$classname, where = assignEnvir))
arg1 = formals(get(methodname))[1]
arg1
devtools::load_all()
library(testthat)
context("R62S3")
nogen <- R6::R6Class("nogen",public = list(printer = function() return("Test No Gen")))
test_that("no generic",{
expect_silent(R62S3(nogen, assignEnvir = .GlobalEnv))
expect_equal(printer(nogen$new()), "Test No Gen")
expect_silent(get("printer"))
expect_silent(get("printer.nogen"))
})
gen <- R6::R6Class("gen",public = list(print = function() return("Test Gen")))
test_that("generic",{
expect_silent(R62S3(gen, assignEnvir = .GlobalEnv))
expect_equal(print(gen$new()), "Test Gen")
expect_silent(get("print.gen"))
expect_silent(get("print"))
})
masker <- R6::R6Class("masker",public = list(pdf = function() return("Test masker")))
test_that("mask FALSE",{
expect_silent(R62S3(masker, assignEnvir = .GlobalEnv, mask = FALSE))
expect_error(pdf(masker$new()))
expect_equal(pdf.masker(masker$new()), "Test masker")
})
devtools::check()
Binomial$new()$pdf(0)
dbinom(0,10,0.5)
dbinom(0,10,0.2)
dbinom(0,10,0.1)
dbinom(0,10,0.2)
dbinom(0,10,0.3)
dbinom(0,10,0.4)
dbinom(0,10,0.5)
x= Binomial$new()
x$support()
liesInSupport(B,0)
liesInSupport(Binomial$new(),0)
x
x$liesInSupport(0)
x$pdf(0)
x$pdf
self=x
pdf = x1
x1=0
pdf = x1
pdf[!self$liesInSupport(x1, all = F)] = 0
pdf
devtools::load_all()
setwd("~/GitHub/distr6")
devtools::load_all()
Binomial$new()
Binomial$new()$pdf(0)
Binomial$new()$pdf(-1)
Binomial$new()$pdf(-2:-1)
devtools::check()
var
var
var.Distribution
isS3stdGeneric("var")
isS3stdGeneric(var)
methods("var")
var
devtools::check()
devtools::check()
remotes::install_github("raphaels1/r62s3")
devtools::load_all()
?quantile
?quantile.Distribution
devtools::document()
?quantile.Distribution
install.packages("raphaels1/distr6","dev")
remotes::install_github("raphaels1/distr6","dev")
library(distr6)
?quantile.Distribution?
?quantile.Distribution
?dostr6
?distr6
?distr6::pdf
View(ArrayDistribution)
?ArrayDistribution
